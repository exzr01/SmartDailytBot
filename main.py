import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time
import openai

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set. Please add it to Railway ‚Üí Variables.")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY is not set. Please add it to Railway ‚Üí Variables.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenAI
openai.api_key = OPENAI_API_KEY

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –î–µ—Ñ–æ–ª—Ç–Ω—ñ –ø–ª–∞–Ω–∏
menu_today = {
    "breakfast": "üç≥ –°–Ω—ñ–¥–∞–Ω–æ–∫: –û–º–ª–µ—Ç –∑ –æ–≤–æ—á–∞–º–∏",
    "lunch": "üçó –û–±—ñ–¥: –ö—É—Ä—è—á–µ —Ñ—ñ–ª–µ + –≥—Ä–µ—á–∫–∞",
    "dinner": "üçú –í–µ—á–µ—Ä—è: –°–∞–ª–∞—Ç + —Ç—É–Ω–µ—Ü—å",
    "water": "üíß –í–æ–¥–∞: –ü—ñ–¥–±–∏–≤–∞–Ω–Ω—è: 2.5 –ª—ñ—Ç—Ä–∞"
}

trainings = {
    "Monday": "üÑ¥ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫: –ì—Ä—É–¥–∏ + –¢—Ä—ñ—Ü–µ–ø—Å + –ü–µ—Ä–µ–¥–Ω—è –¥–µ–ª—å—Ç–∞...",
    "Wednesday": "üîµ –°–µ—Ä–µ–¥–∞: –°–ø–∏–Ω–∞ + –ë—ñ—Ü–µ–ø—Å + –ó–∞–¥–Ω—è –¥–µ–ª—å—Ç–∞...",
    "Friday": "üü¢ –ü'—è—Ç–Ω–∏—Ü—è: –ù–æ–≥–∏ + –ü—Ä–µ—Å + –ë—ñ—á–Ω–∞ –¥–µ–ª—å—Ç–∞..."
}

# –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
async def send_reminder(user_id: int, message: str):
    await bot.send_message(user_id, message)

# –°–∫–ª–∞–¥–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
@dp.message(Command("–©–æ —Å—å–æ–≥–æ–¥–Ω—ñ?"))
async def today_schedule(message: types.Message):
    today = datetime.now().strftime("%d.%m.%Y")
    weekday = datetime.now().strftime("%A")
    plan = f"\ud83d\udcc5 <b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({today}):</b>\n"
    plan += "07:00 ‚Äî üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n" if weekday in trainings else ""
    plan += f"08:30 ‚Äî {menu_today['breakfast']}\n"
    plan += f"13:00 ‚Äî {menu_today['lunch']}\n"
    plan += f"19:00 ‚Äî {menu_today['dinner']}\n"
    plan += f"21:00 ‚Äî {menu_today['water']}"
    await message.answer(plan)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω—é —á–µ—Ä–µ–∑ GPT
@dp.message(Command("–æ–Ω–æ–≤–∏_–º–µ–Ω—é"))
async def update_menu_handler(message: types.Message):
    prompt = "–ó–≥–µ–Ω–µ—Ä—É–π –Ω–æ–≤–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å –¥–ª—è –∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –º—É–ª—å—Ç–∏–ø–µ—á—ñ. –í–∏–≤–µ–¥–∏ 3 –ø—Ä–∏–π–æ–º–∏ —ó–∂—ñ —Ç–∞ –Ω–æ—Ä–º—É –≤–æ–¥–∏."
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    new_plan = response.choices[0].message.content
    await message.answer(f"üìä –û–Ω–æ–≤–ª–µ–Ω–µ –º–µ–Ω—é GPT:\n{new_plan}")

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("üëã –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! –©–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥—É—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")

    user_id = message.from_user.id
    scheduler.add_job(send_reminder, "cron", hour=7, minute=0, args=[user_id, "üí™ –ß–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!"])
    scheduler.add_job(send_reminder, "cron", hour=8, minute=30, args=[user_id, menu_today['breakfast']])
    scheduler.add_job(send_reminder, "cron", hour=13, minute=0, args=[user_id, menu_today['lunch']])
    scheduler.add_job(send_reminder, "cron", hour=19, minute=0, args=[user_id, menu_today['dinner']])
    scheduler.add_job(send_reminder, "cron", hour=21, minute=0, args=[user_id, menu_today['water']])

    scheduler.start()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
