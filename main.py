import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set. Please add it to Railway ‚Üí Variables.")

if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY is not set. Please add it to Railway ‚Üí Variables.")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
scheduler = AsyncIOScheduler()
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –°—Ç–∞—Ç–∏—á–Ω–µ –º–µ–Ω—é —ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (–∑–∞–ª–∏—à–∞—î–º–æ —è–∫ –±—É–ª–æ)
MENU = "ü•£ –°–Ω—ñ–¥–∞–Ω–æ–∫: –û–º–ª–µ—Ç —ñ–∑ –æ–≤–æ—á–∞–º–∏\nü•ó –û–±—ñ–¥: –ö—É—Ä–∫–∞ –∑ —Ä–∏—Å–æ–º\nüçΩ –í–µ—á–µ—Ä—è: –õ–æ—Å–æ—Å—å —ñ —Å–∞–ª–∞—Ç"
WORKOUTS = {
    "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫": "1. –ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞—á–∏ ‚Äî 4√ó8\n2. –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ø—ñ–¥ –∫—É—Ç–æ–º ‚Äî 3√ó10\n3. –ö—Ä–æ—Å–æ–≤–µ—Ä ‚Äî 3√ó12...",
    "–°–µ—Ä–µ–¥–∞": "1. –¢—è–≥–∞ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –±–ª–æ–∫—É ‚Äî 4√ó10\n2. –¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞—Ö–∏–ª—ñ ‚Äî 3√ó10...",
    "–ü º—è—Ç–Ω–∏—Ü—è": "1. –ñ–∏–º –Ω–æ–≥–∞–º–∏ ‚Äî 4√ó10\n2. –†—É–º—É–Ω—Å—å–∫–∞ —Ç—è–≥–∞ ‚Äî 3√ó12..."
}

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–©–æ —Å—å–æ–≥–æ–¥–Ω—ñ?", callback_data="today")],
        [InlineKeyboardButton(text="–û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é GPT", callback_data="update_menu")],
        [InlineKeyboardButton(text="–û–Ω–æ–≤–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è GPT", callback_data="update_workout")]
    ])
    await message.answer("üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "today")
async def today_callback(callback: types.CallbackQuery):
    today = datetime.now().strftime("%A")
    day_map = {"Monday": "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "Wednesday": "–°–µ—Ä–µ–¥–∞", "Friday": "–ü º—è—Ç–Ω–∏—Ü—è"}
    day = day_map.get(today, "")
    workout = WORKOUTS.get(day, "–°—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ üßò‚Äç‚ôÇÔ∏è")
    await callback.message.answer(f"üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({day}):\n{workout}\n\nüçΩ –ú–µ–Ω—é:\n{MENU}")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "update_menu")
async def update_menu(callback: types.CallbackQuery):
    await callback.message.answer("üîÑ –û–Ω–æ–≤–ª—é—é –º–µ–Ω—é —á–µ—Ä–µ–∑ GPT...")
    prompt = "–°—Ç–≤–æ—Ä–∏ —Ñ—ñ—Ç–Ω–µ—Å-–º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å: —Å–Ω—ñ–¥–∞–Ω–æ–∫, –æ–±—ñ–¥ —ñ –≤–µ—á–µ—Ä—è, –¥–ª—è —Å–ø–∞–ª—é–≤–∞–Ω–Ω—è –∂–∏—Ä—É. –ö–æ—Ä–æ—Ç–∫–æ."
    response = openai_client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    global MENU
    MENU = response.choices[0].message.content.strip()
    await callback.message.answer(f"‚úÖ –ù–æ–≤–µ –º–µ–Ω—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ:\n{MENU}")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "update_workout")
async def update_workout(callback: types.CallbackQuery):
    await callback.message.answer("üîÑ –û–Ω–æ–≤–ª—é—é —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ GPT...")
    prompt = "–°—Ç–≤–æ—Ä–∏ —Ñ—ñ—Ç–Ω–µ—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (—Ñ—É–ª–±–∞–¥—ñ –∞–±–æ —Å–ø–ª—ñ—Ç) –Ω–∞ –¥–µ–Ω—å –¥–ª—è –∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è. –ö–æ—Ä–æ—Ç–∫–æ, –∞–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ."
    response = openai_client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    today = datetime.now().strftime("%A")
    day_map = {"Monday": "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "Wednesday": "–°–µ—Ä–µ–¥–∞", "Friday": "–ü º—è—Ç–Ω–∏—Ü—è"}
    day = day_map.get(today, "–Ü–Ω—à–∏–π –¥–µ–Ω—å")
    global WORKOUTS
    WORKOUTS[day] = response.choices[0].message.content.strip()
    await callback.message.answer(f"‚úÖ –ù–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ {day}:")
    await callback.message.answer(WORKOUTS[day])
    await callback.answer()

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
