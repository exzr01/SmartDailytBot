import os
import asyncio
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from openai import AsyncOpenAI

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set. Please add it to Railway ‚Üí Variables.")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY is not set. Please add it to Railway ‚Üí Variables.")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
scheduler = AsyncIOScheduler()
openai = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –†–æ–∑–∫–ª–∞–¥
WORKOUT_PLAN = {
    "monday": "üî¥ –ü–æ–Ω–µ–¥i–ª–æ–∫ ‚Äì –ì–†–£–î–ò + –¢–†I–¶–ï–ü–° + –ü–ï–†–ï–î–ù–Ø –î–ï–õ–¨–¢–ê...",
    "wednesday": "üîµ –°–µ—Ä–µ–¥–∞ ‚Äì –°–ü–ò–ù–ê + –ëI–¶–ï–ü–° + –ó–ê–î–ù–Ø –î–ï–õ–¨–¢–ê...",
    "friday": "üî∑ –ü‚Äô—è—Ç–Ω–∏—Ü—è ‚Äì –ù–û–ì–ò + –ü–†–ï–° + –ëI–ß–ù–ê –î–ï–õ–¨–¢–ê..."
}

MEAL_PLAN = {
    "breakfast": "üçº –û–º–ª–µ—Ç –∑ –æ–≤–æ—á–∞–º–∏ –≤ –º—É–ª—å—Ç–∏–ø–µ—á—ñ",
    "lunch": "ü•ö –ö—É—Ä—è—á–µ —Ñ—ñ–ª–µ –∑ –±—Ä–æ–∫–æ–ª—ñ",
    "dinner": "üßÉ –†–∏–±–∞ –∑ –æ–≤–æ—á–∞–º–∏ –Ω–∞ –ø–∞—Ä—ñ"
}

# –ö–Ω–æ–ø–∫–∏
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùì –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ?", callback_data="today")],
    [InlineKeyboardButton(text="üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="workout")],
    [InlineKeyboardButton(text="üçΩÔ∏è –ú–µ–Ω—é", callback_data="menu")],
    [InlineKeyboardButton(text="‚ú® –û–Ω–æ–≤–∏—Ç–∏ —á–µ—Ä–µ–∑ GPT", callback_data="update_menu")]
])

update_menu_markup = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–°–Ω—ñ–¥–∞–Ω–æ–∫", callback_data="gpt_breakfast")],
    [InlineKeyboardButton(text="–û–±—ñ–¥", callback_data="gpt_lunch")],
    [InlineKeyboardButton(text="–í–µ—á–µ—Ä—è", callback_data="gpt_dinner")],
    [InlineKeyboardButton(text="–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="gpt_workout")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
])

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø SmartDailyBot. –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu)

@dp.callback_query(F.data == "today")
async def today_plan(callback: CallbackQuery):
    weekday = datetime.datetime.now().strftime('%A').lower()
    workout = WORKOUT_PLAN.get(weekday, "–°—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ üåû")
    meals = f"\n\nüçº –°–Ω—ñ–¥–∞–Ω–æ–∫: {MEAL_PLAN['breakfast']}\nü•ö –û–±—ñ–¥: {MEAL_PLAN['lunch']}\nüßÉ –í–µ—á–µ—Ä—è: {MEAL_PLAN['dinner']}"
    await callback.message.answer(f"<b>–¢–≤—ñ–π –¥–µ–Ω—å:</b>\n\n{workout}{meals}")
    await callback.answer()

@dp.callback_query(F.data == "workout")
async def workout_details(callback: CallbackQuery):
    weekday = datetime.datetime.now().strftime('%A').lower()
    workout = WORKOUT_PLAN.get(weekday, "–°—å–æ–≥–æ–¥–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–µ–º–∞—î")
    await callback.message.answer(f"<b>–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</b>\n{workout}")
    await callback.answer()

@dp.callback_query(F.data == "menu")
async def menu_details(callback: CallbackQuery):
    meals = f"üçº –°–Ω—ñ–¥–∞–Ω–æ–∫: {MEAL_PLAN['breakfast']}\nü•ö –û–±—ñ–¥: {MEAL_PLAN['lunch']}\nüßÉ –í–µ—á–µ—Ä—è: {MEAL_PLAN['dinner']}"
    await callback.message.answer(f"<b>–ú–µ–Ω—é –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:</b>\n{meals}")
    await callback.answer()

@dp.callback_query(F.data == "update_menu")
async def update_menu(callback: CallbackQuery):
    await callback.message.answer("–û–Ω–æ–≤–∏ –æ–∫—Ä–µ–º–∏–π –ø—É–Ω–∫—Ç —á–µ—Ä–µ–∑ GPT:", reply_markup=update_menu_markup)
    await callback.answer()

async def gpt_generate(prompt: str) -> str:
    response = await openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢–∏ —Ñ—ñ—Ç–Ω–µ—Å-–∞—Å–∏—Å—Ç–µ–Ω—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ."},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content.strip()

@dp.callback_query(F.data.in_("gpt_breakfast", "gpt_lunch", "gpt_dinner", "gpt_workout"))
async def gpt_update_specific(callback: CallbackQuery):
    field_map = {
        "gpt_breakfast": ("breakfast", "–û–Ω–æ–≤–ª—é—é —Å–Ω—ñ–¥–∞–Ω–æ–∫...", "–°–Ω—ñ–¥–∞–Ω–æ–∫ –¥–ª—è –∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è"),
        "gpt_lunch": ("lunch", "–û–Ω–æ–≤–ª—é—é –æ–±—ñ–¥...", "–û–±—ñ–¥ –¥–ª—è –∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è"),
        "gpt_dinner": ("dinner", "–û–Ω–æ–≤–ª—é—é –≤–µ—á–µ—Ä—é...", "–í–µ—á–µ—Ä—è –¥–ª—è –∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è"),
        "gpt_workout": ("workout", "–û–Ω–æ–≤–ª—é—é —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è...", "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ñ—É–ª–±–∞–¥—ñ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å")
    }
    field, wait_msg, prompt = field_map[callback.data]
    await callback.message.answer(wait_msg)
    try:
        result = await gpt_generate(prompt)
        if field == "workout":
            weekday = datetime.datetime.now().strftime('%A').lower()
            WORKOUT_PLAN[weekday] = result
        else:
            MEAL_PLAN[field] = result
        await callback.message.answer(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: {result}")
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
    await callback.answer()

@dp.callback_query(F.data == "back")
async def back_to_main(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –º–µ–Ω—é:", reply_markup=main_menu)
    await callback.answer()

# –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
async def send_reminders():
    now = datetime.datetime.now().strftime('%H:%M')
    weekday = datetime.datetime.now().strftime('%A').lower()
    for user_id in [123456789]:  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π ID
        if now == "07:00":
            await bot.send_message(user_id, "üìä –ß–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!", reply_markup=main_menu)
        elif now == "08:30":
            await bot.send_message(user_id, f"üçº –°–Ω—ñ–¥–∞–Ω–æ–∫: {MEAL_PLAN['breakfast']}")
        elif now == "13:00":
            await bot.send_message(user_id, f"ü•ö –û–±—ñ–¥: {MEAL_PLAN['lunch']}")
        elif now == "19:00":
            await bot.send_message(user_id, f"üßÉ –í–µ—á–µ—Ä—è: {MEAL_PLAN['dinner']}")

scheduler.add_job(send_reminders, 'cron', minute='0', hour='7,8,13,19')

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
