# –î–æ–¥–∞–º–æ –ª–æ–≥—ñ–∫—É –≤—ñ–¥–º—ñ—Ç–∫–∏ –ø—ñ–¥—Ö–æ–¥—ñ–≤ —É –≤–ø—Ä–∞–≤—ñ –¥–ª—è SmartDailyBot

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# –ó–±–µ—Ä–µ–∂–µ–º–æ –ø—Ä–∏–∫–ª–∞–¥ –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –ø—ñ–¥—Ö–æ–¥–∞–º–∏
WORKOUT_SETS = {
    "monday": [
        {"exercise": "–ñ–∏–º –ª–µ–∂–∞—á–∏", "sets": 3, "done": [False, False, False]},
        {"exercise": "–ö—Ä–æ—Å–æ–≤–µ—Ä", "sets": 3, "done": [False, False, False]},
        {"exercise": "–ë—Ä—É—Å–∏", "sets": 3, "done": [False, False, False]}
    ]
}

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤—ñ–¥–º—ñ—Ç–∫–∏ –ø—ñ–¥—Ö–æ–¥—ñ–≤

def generate_sets_keyboard(day):
    keyboard = []
    for i, exercise in enumerate(WORKOUT_SETS[day]):
        row = []
        for j in range(exercise['sets']):
            label = "‚úÖ" if exercise['done'][j] else f"{j+1}"
            row.append(InlineKeyboardButton(
                text=label,
                callback_data=f"set_done:{day}:{i}:{j}"
            ))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –≤—ñ–¥–º—ñ—Ç–∫–æ—é –ø—ñ–¥—Ö–æ–¥—ñ–≤
@dp.callback_query(F.data == "track_workout")
async def track_workout(callback: types.CallbackQuery):
    weekday = datetime.datetime.now().strftime('%A').lower()
    if weekday not in WORKOUT_SETS:
        await callback.message.answer("–°—å–æ–≥–æ–¥–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ–º–∞—î")
        return
    text = "<b>–í–∏–∫–æ–Ω—É–π –≤–ø—Ä–∞–≤–∏ –π –≤—ñ–¥–º—ñ—á–∞–π –ø—ñ–¥—Ö–æ–¥–∏:</b>\n\n"
    for i, ex in enumerate(WORKOUT_SETS[weekday]):
        status = " ".join(["‚úÖ" if done else "üî≤" for done in ex["done"]])
        text += f"{ex['exercise']}: {status}\n"
    await callback.message.answer(text, reply_markup=generate_sets_keyboard(weekday))
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–º—ñ—Ç–∫–∏ –ø—ñ–¥—Ö–æ–¥—É
@dp.callback_query(F.data.startswith("set_done"))
async def mark_set_done(callback: types.CallbackQuery):
    _, day, ex_idx, set_idx = callback.data.split(":")
    ex_idx, set_idx = int(ex_idx), int(set_idx)
    WORKOUT_SETS[day][ex_idx]['done'][set_idx] = not WORKOUT_SETS[day][ex_idx]['done'][set_idx]
    await track_workout(callback)
