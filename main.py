import os
import asyncio
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# --- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å ---
WORKOUTS = {
    "monday": {
        "title": "üî¥ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ ‚Äì –ì–†–£–î–ò + –¢–†–Ü–¶–ï–ü–° + –ü–ï–†–ï–î–ù–Ø –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞—á–∏", "4√ó8"),
            ("–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ø—ñ–¥ –∫—É—Ç–æ–º", "3√ó10"),
            ("–ö—Ä–æ—Å–æ–≤–µ—Ä", "3√ó12"),
            ("–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è –Ω–∞ –±—Ä—É—Å–∞—Ö", "3√ó–º–∞–∫—Å"),
            ("–ñ–∏–º –≤–Ω–∏–∑ –Ω–∞ —Ç—Ä—ñ—Ü–µ–ø—Å (–∫–∞–Ω–∞—Ç)", "3√ó12"),
            ("–§—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π –∂–∏–º", "3√ó10"),
            ("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ñ –ø—ñ–¥–π–æ–º–∏ –≥–∞–Ω—Ç–µ–ª–µ–π", "3√ó15")
        ]
    },
    "wednesday": {
        "title": "üîµ –°–µ—Ä–µ–¥–∞ ‚Äì –°–ü–ò–ù–ê + –ë–Ü–¶–ï–ü–° + –ó–ê–î–ù–Ø –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –±–ª–æ–∫—É", "4√ó10"),
            ("–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞—Ö–∏–ª—ñ", "3√ó10"),
            ("–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è / –Ω–∏–∂–Ω—è —Ç—è–≥–∞", "3√ó–º–∞–∫—Å"),
            ("–ü—ñ–¥–π–æ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±—ñ—Ü–µ–ø—Å", "3√ó12"),
            ("–ú–æ–ª–æ—Ç–∫–∏", "3√ó12"),
            ("–ó–≤–æ—Ä–æ—Ç–Ω—ñ –º–∞—Ö–∏ –≤ –Ω–∞—Ö–∏–ª—ñ", "3√ó15")
        ]
    },
    "friday": {
        "title": "üü¢ –ü‚Äô—è—Ç–Ω–∏—Ü—è ‚Äì –ù–û–ì–ò + –ü–†–ï–° + –ë–Ü–ß–ù–ê –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–ñ–∏–º –Ω–æ–≥–∞–º–∏ / –ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è", "4√ó10"),
            ("–†—É–º—É–Ω—Å—å–∫–∞ —Ç—è–≥–∞", "3√ó12"),
            ("–í–∏–ø–∞–¥–∏", "3√ó10 –Ω–∞ –Ω–æ–≥—É"),
            ("–ü—Ä–µ—Å", "3√ó15"),
            ("–ë—ñ—á–Ω—ñ –º–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏ —Å—Ç–æ—è—á–∏", "3√ó15"),
            ("–ë—ñ—á–Ω—ñ –º–∞—Ö–∏ —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ", "3√ó15")
        ]
    }
}

user_progress = {}
user_cardio = {}

# --- –ö–Ω–æ–ø–∫–∏ ---
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="workout")],
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="add_activity")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])

def workout_day_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—ñ", callback_data="workout_details")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def exercises_keyboard(weekday, user_id):
    buttons = []
    done = user_progress.get(user_id, {}).get(weekday, set())
    for i, (exercise, reps) in enumerate(WORKOUTS[weekday]["exercises"]):
        done_mark = "‚úÖ" if i in done else ""
        buttons.append([InlineKeyboardButton(
            text=f"{done_mark} {exercise} ({reps})",
            callback_data=f"toggle_{weekday}_{i}"
        )])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())

@dp.callback_query(F.data == "workout")
async def workout_today(callback: types.CallbackQuery):
    weekday = datetime.datetime.now().strftime('%A').lower()
    if weekday not in WORKOUTS:
        await callback.message.answer("–°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É üåû")
    else:
        await callback.message.answer(f"<b>{WORKOUTS[weekday]['title']}</b>", reply_markup=workout_day_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "workout_details")
async def workout_details(callback: types.CallbackQuery):
    weekday = datetime.datetime.now().strftime('%A').lower()
    keyboard = exercises_keyboard(weekday, callback.from_user.id)
    await callback.message.answer("–í–ø—Ä–∞–≤–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("toggle_"))
async def toggle_exercise(callback: types.CallbackQuery):
    _, weekday, index = callback.data.split("_")
    index = int(index)
    user_id = callback.from_user.id

    if user_id not in user_progress:
        user_progress[user_id] = {}
    if weekday not in user_progress[user_id]:
        user_progress[user_id][weekday] = set()

    if index in user_progress[user_id][weekday]:
        user_progress[user_id][weekday].remove(index)
    else:
        user_progress[user_id][weekday].add(index)

    keyboard = exercises_keyboard(weekday, user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer("–û–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

@dp.callback_query(F.data == "add_activity")
async def add_custom_activity(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    today = datetime.datetime.now().strftime('%A').lower()
    user_cardio.setdefault(user_id, {}).setdefault(today, []).append("–ö–∞—Ä–¥—ñ–æ / –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
    await callback.message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–æ–¥–∞–Ω–æ –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
    await callback.answer()

@dp.callback_query(F.data == "stats")
async def show_statistics(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    days = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
    names = {
        "monday": "–ü–Ω",
        "tuesday": "–í—Ç",
        "wednesday": "–°—Ä",
        "thursday": "–ß—Ç",
        "friday": "–ü—Ç",
        "saturday": "–°–±",
        "sunday": "–ù–¥"
    }
    report = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:</b>\n"
    for day in days:
        if day in WORKOUTS:
            completed = "‚úÖ" if user_progress.get(user_id, {}).get(day) else "‚ùå"
            report += f"{names[day]} ‚Äì {WORKOUTS[day]['title']} {completed}\n"
        if user_cardio.get(user_id, {}).get(day):
            report += f"    üèÉ –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {len(user_cardio[user_id][day])} —Ä–∞–∑(—ñ–≤)\n"
    await callback.message.answer(report)
    await callback.answer()

@dp.callback_query(F.data == "back")
async def go_back(callback: types.CallbackQuery):
    await callback.message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é", reply_markup=main_menu())
    await callback.answer()

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
