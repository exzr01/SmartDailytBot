import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set. Please add it to Railway ‚Üí Variables.")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
scheduler = AsyncIOScheduler()
user_chat_id = None  # —Ç–∏–º—á–∞—Å–æ–≤–æ —Ç—É—Ç –∑–±–µ—Ä—ñ–≥–∞—î–º–æ ID

reminders = [
    {"time": "07:00", "text": "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ—Ä–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: –≥—Ä—É–¥–∏ + —Ç—Ä–∏—Ü–µ–ø—Å üí™"},
    {"time": "08:30", "text": "üç≥ –°–Ω—ñ–¥–∞–Ω–æ–∫: –æ–º–ª–µ—Ç –∑ –æ–≤–æ—á–∞–º–∏ —Ç–∞ –∞–≤–æ–∫–∞–¥–æ ü•ë"},
    {"time": "13:00", "text": "üçó –û–±—ñ–¥: –∫—É—Ä—è—á–µ —Ñ—ñ–ª–µ, —Ä–∏—Å —Ç–∞ –æ–≤–æ—á—ñ"},
    {"time": "16:30", "text": "ü•ú –ü–µ—Ä–µ–∫—É—Å: –≥—Ä–µ—Ü—å–∫–∏–π –π–æ–≥—É—Ä—Ç –∑ –≥–æ—Ä—ñ—Ö–∞–º–∏"},
    {"time": "19:30", "text": "ü•¶ –í–µ—á–µ—Ä—è: —Ä–∏–±–∞ –∑ –±—Ä–æ–∫–æ–ª—ñ –Ω–∞ –ø–∞—Ä—É"},
    {"time": "22:00", "text": "üõå –ß–∞—Å –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏. –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤–∏–π –¥–µ–Ω—å!"},
]

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    global user_chat_id
    user_chat_id = message.chat.id
    await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! –©–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥—É—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")

async def send_reminder(text):
    if user_chat_id:
        try:
            await bot.send_message(chat_id=user_chat_id, text=text)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {e}")

async def main():
    for reminder in reminders:
        hour, minute = reminder["time"].split(":")
        scheduler.add_job(send_reminder, CronTrigger(hour=hour, minute=minute), args=[reminder["text"]])
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
