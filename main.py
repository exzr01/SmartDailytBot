import os
import asyncio
import datetime as dt
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler(timezone=ZoneInfo("Europe/Kyiv"))

# --- –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ---
WORKOUTS = {
    "monday": {
        "title": "üî¥ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ ‚Äì –ì–†–£–î–ò + –¢–†–Ü–¶–ï–ü–° + –ü–ï–†–ï–î–ù–Ø –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞—á–∏", "4√ó8"),
            ("–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ø—ñ–¥ –∫—É—Ç–æ–º", "3√ó10"),
            ("–ö—Ä–æ—Å–æ–≤–µ—Ä", "3√ó12"),
            ("–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è –Ω–∞ –±—Ä—É—Å–∞—Ö", "3√ó–º–∞–∫—Å"),
            ("–ñ–∏–º –≤–Ω–∏–∑ –Ω–∞ —Ç—Ä—ñ—Ü–µ–ø—Å (–∫–∞–Ω–∞—Ç)", "3√ó12"),
            ("–§—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π –∂–∏–º", "3√ó10"),
            ("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ñ –ø—ñ–¥–π–æ–º–∏ –≥–∞–Ω—Ç–µ–ª–µ–π", "3√ó15")
        ]
    },
    "wednesday": {
        "title": "üîµ –°–µ—Ä–µ–¥–∞ ‚Äì –°–ü–ò–ù–ê + –ë–Ü–¶–ï–ü–° + –ó–ê–î–ù–Ø –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –±–ª–æ–∫—É", "4√ó10"),
            ("–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞—Ö–∏–ª—ñ", "3√ó10"),
            ("–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è / –Ω–∏–∂–Ω—è —Ç—è–≥–∞", "3√ó–º–∞–∫—Å"),
            ("–ü—ñ–¥–π–æ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±—ñ—Ü–µ–ø—Å", "3√ó12"),
            ("–ú–æ–ª–æ—Ç–∫–∏", "3√ó12"),
            ("–ó–≤–æ—Ä–æ—Ç–Ω—ñ –º–∞—Ö–∏ –≤ –Ω–∞—Ö–∏–ª—ñ", "3√ó15")
        ]
    },
    "friday": {
        "title": "üü¢ –ü‚Äô—è—Ç–Ω–∏—Ü—è ‚Äì –ù–û–ì–ò + –ü–†–ï–° + –ë–Ü–ß–ù–ê –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–ñ–∏–º –Ω–æ–≥–∞–º–∏ / –ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è", "4√ó10"),
            ("–†—É–º—É–Ω—Å—å–∫–∞ —Ç—è–≥–∞", "3√ó12"),
            ("–í–∏–ø–∞–¥–∏", "3√ó10 –Ω–∞ –Ω–æ–≥—É"),
            ("–ü—Ä–µ—Å", "3√ó15"),
            ("–ë—ñ—á–Ω—ñ –º–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏ —Å—Ç–æ—è—á–∏", "3√ó15"),
            ("–ë—ñ—á–Ω—ñ –º–∞—Ö–∏ —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ", "3√ó15")
        ]
    }
}

# --- Rest Day —á–µ–∫–ª—ñ—Å—Ç ---
REST_TODO = [
    "Zone 2 ‚Äî 30‚Äì40 —Ö–≤",
    "10 000 –∫—Ä–æ–∫—ñ–≤",
    "–ú–æ–±—ñ–ª—å–Ω—ñ—Å—Ç—å ‚Äî 12 —Ö–≤",
    "Core ‚Äî 8 —Ö–≤",
    "–î–∏—Ö–∞–Ω–Ω—è ‚Äî 5 —Ö–≤",
    "–†–æ–ª–µ—Ä/–º–∞—Å–∞–∂ ‚Äî 5‚Äì7 —Ö–≤",
    "–ì—ñ–¥—Ä–∞—Ü—ñ—è/—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ",
    "–°–æ–Ω ‚Äî –ø–ª–∞–Ω –Ω–∞ –Ω—ñ—á"
]

# ===== –ó–ë–ï–†–Ü–ì–ê–ù–ù–Ø –°–¢–ê–ù–£ =====
user_progress: dict[int, dict[str, set[int]]] = {}          # —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {uid: {date: set(ex_idx)}}
user_rest: dict[int, dict[str, set[int]]] = {}              # rest —á–µ–∫–ª—ñ—Å—Ç: {uid: {date: set(item_idx)}}
user_cardio: dict[int, dict[str, list[str]]] = {}           # –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ-–º—ñ—Ç–∫–∏: {uid: {date: [labels...]}}
# –•–∞—Ä—á—É–≤–∞–Ω–Ω—è / –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ / —Å—Ç–∞—Ç—É—Å –¥–Ω—è
# user_nutrition[uid][date] = {
#   "meals":[{"name","kcal"}],
#   "protein_g": int,
#   "kcal_add": int,                   # —Ä—É—á–Ω—ñ —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏ (+360 —ñ —Ç.–¥.)
#   "total_kcal_manual": int,          # —è–∫—â–æ –≤–≤—ñ–≤ –≥–æ—Ç–æ–≤–∏–π –ø—ñ–¥—Å—É–º–æ–∫
#   "burned_kcal": int,                # —Å—É–º–∞—Ä–Ω–æ —Å–ø–∞–ª–µ–Ω–æ –∑–∞ –¥–µ–Ω—å (–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π)
#   "activities":[{"name","kcal"}],    # —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑—ñ —Å–ø–∞–ª–µ–Ω–∏–º–∏ –∫–∫–∞–ª
#   "day_status": "OK"/"INCOMPLETE"/None,
#   "closed": bool
# }
user_nutrition: dict[int, dict[str, dict]] = {}
subscribers: set[int] = set()

# ===== –î–ê–¢–ò / –î–ù–Ü =====
def today_str() -> str:
    return dt.date.today().isoformat()

def weekday_key_by_date(d: dt.date) -> str | None:
    return {0: "monday", 2: "wednesday", 4: "friday"}.get(d.weekday())

def weekday_short_ua(d: dt.date) -> str:
    return ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–ù–¥"][d.weekday()]

# ===== –û–ë–ß–ò–°–õ–ï–ù–ù–Ø –ö–ê–õ–û–†–Ü–ô =====
def calc_intake_kcal(nd: dict) -> int:
    meals_sum = sum(int(m["kcal"]) for m in nd.get("meals", [])) if nd.get("meals") else 0
    increments = int(nd.get("kcal_add", 0))
    manual = nd.get("total_kcal_manual", None)
    if isinstance(manual, int):
        return manual
    return meals_sum + increments

def calc_burned_kcal(nd: dict) -> int:
    return int(nd.get("burned_kcal", 0))

def ensure_day(uid: int, dstr: str) -> dict:
    user_nutrition.setdefault(uid, {}).setdefault(dstr, {})
    nd = user_nutrition[uid][dstr]
    nd.setdefault("meals", [])
    nd.setdefault("activities", [])
    nd.setdefault("kcal_add", 0)
    nd.setdefault("burned_kcal", 0)
    nd.setdefault("day_status", None)
    nd.setdefault("closed", False)
    return nd

# ===== –ö–ù–û–ü–ö–ò =====
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="workout_today")],
        [InlineKeyboardButton(text="üçΩ –•–∞—Ä—á—É–≤–∞–Ω–Ω—è", callback_data="nutrition_menu")],
        [InlineKeyboardButton(text="üèÉ –î–æ–¥–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="act:add")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä–∏—Ç–∏ –¥–µ–Ω—å", callback_data="day:close")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])

def exercises_keyboard(date_str: str, day_key: str, uid: int):
    done = user_progress.get(uid, {}).get(date_str, set())
    rows = []
    for i, (exercise, reps) in enumerate(WORKOUTS[day_key]["exercises"]):
        mark = "‚úÖ" if i in done else "‚¨úÔ∏è"
        rows.append([InlineKeyboardButton(
            text=f"{mark} {exercise} ({reps})",
            callback_data=f"toggle:{date_str}:{day_key}:{i}"
        )])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def rest_keyboard(date_str: str, uid: int):
    done = user_rest.get(uid, {}).get(date_str, set())
    rows = []
    for i, item in enumerate(REST_TODO):
        mark = "‚úÖ" if i in done else "‚¨úÔ∏è"
        rows.append([InlineKeyboardButton(
            text=f"{mark} {item}",
            callback_data=f"rtoggle:{date_str}:{i}"
        )])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def nutrition_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–π–æ–º —ó–∂—ñ", callback_data="nut:add_meal")],
        [InlineKeyboardButton(text="üçó –î–æ–¥–∞—Ç–∏ –±—ñ–ª–æ–∫ (–≥/–¥–µ–Ω—å)", callback_data="nut:add_protein")],
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó —á–∏—Å–ª–æ–º", callback_data="nut:add_kcal")],
        [InlineKeyboardButton(text="üßÆ –í–≤–µ—Å—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –∫–∞–ª–æ—Ä—ñ–π", callback_data="nut:add_total")],
        [InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–ø–∏—Å–∏ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data="nut:show_today")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# ===== FSM =====
class AddMeal(StatesGroup):
    waiting_name = State()
    waiting_kcal = State()

class AddProtein(StatesGroup):
    waiting_value = State()

class AddTotal(StatesGroup):
    waiting_value = State()

class AddKcal(StatesGroup):
    waiting_value = State()

class AddActivity(StatesGroup):
    waiting_name = State()
    waiting_kcal = State()

# ===== –†–ï–ù–î–ï–† =====
def render_workout_today(uid: int) -> tuple[str, InlineKeyboardMarkup]:
    d = dt.date.today()
    dstr = d.isoformat()
    day_key = weekday_key_by_date(d)
    if not day_key:
        text = "<b>Rest Day</b>\n–õ–µ–≥–∫–∏–π –¥–µ–Ω—å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è. –í—ñ–¥–º—ñ—á–∞–π –≤–∏–∫–æ–Ω–∞–Ω–µ üëá"
        return text, rest_keyboard(dstr, uid)
    title = WORKOUTS[day_key]["title"]
    text = f"<b>{title}</b>\n–û–±–∏—Ä–∞–π –≤–ø—Ä–∞–≤–∏ —Ç–∞ –≤—ñ–¥–º—ñ—á–∞–π –≤–∏–∫–æ–Ω–∞–Ω–µ:"
    return text, exercises_keyboard(dstr, day_key, uid)

def render_nutrition_today(uid: int) -> str:
    dstr = today_str()
    nd = ensure_day(uid, dstr)
    meals = nd.get("meals", [])
    protein = nd.get("protein_g", 0)
    intake = calc_intake_kcal(nd)
    burned = calc_burned_kcal(nd)
    net = intake - burned
    if meals:
        meals_lines = "\n".join([f"‚Ä¢ {m['name']} ‚Äî {m['kcal']} –∫–∫–∞–ª" for m in meals])
    else:
        meals_lines = "‚Äî"
    acts = nd.get("activities", [])
    acts_lines = "\n".join([f"‚Ä¢ {a['name']} ‚Äî {a['kcal']} –∫–∫–∞–ª üî•" for a in acts]) if acts else "‚Äî"
    inc = nd.get("kcal_add", 0)
    manual = nd.get("total_kcal_manual", None)
    manual_str = f"{manual} –∫–∫–∞–ª (–≤–≤–µ–¥–µ–Ω–æ –≤—Ä—É—á–Ω—É)" if isinstance(manual, int) else "‚Äî"
    return (
        f"üçΩ <b>–•–∞—Ä—á—É–≤–∞–Ω–Ω—è {dstr}</b>\n"
        f"{meals_lines}\n"
        f"‚Äî –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–∞–ª–æ—Ä—ñ—ó: {inc} –∫–∫–∞–ª\n"
        f"‚Äî –ü—ñ–¥—Å—É–º–æ–∫ (—Ä—É—á–Ω–∏–π): {manual_str}\n"
        f"‚Äî‚Äî‚Äî\n"
        f"üî• <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</b>\n{acts_lines}\n"
        f"‚Äî‚Äî‚Äî\n"
        f"–°—É–º–∞—Ä–Ω–æ —ñ–Ω—Ç–µ–π–∫: <b>{intake}</b> –∫–∫–∞–ª\n"
        f"–°–ø–∞–ª–µ–Ω–æ: <b>{burned}</b> –∫–∫–∞–ª üî•\n"
        f"–ù–µ—Ç—Ç–æ: <b>{net}</b> –∫–∫–∞–ª ‚öñÔ∏è\n"
        f"–ë—ñ–ª–æ–∫: <b>{protein}</b> –≥"
    )

# ===== /start =====
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    subscribers.add(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())

# ===== –¢–†–ï–ù–£–í–ê–ù–ù–Ø / REST =====
@dp.callback_query(F.data == "workout_today")
async def workout_today(cb: types.CallbackQuery):
    text, kb = render_workout_today(cb.from_user.id)
    await cb.message.answer(text, reply_markup=kb)
    await cb.answer()

@dp.callback_query(F.data.startswith("toggle:"))
async def toggle_exercise(cb: types.CallbackQuery):
    # toggle:YYYY-MM-DD:day_key:index
    _, dstr, day_key, idx = cb.data.split(":")
    i = int(idx)
    uid = cb.from_user.id
    user_progress.setdefault(uid, {}).setdefault(dstr, set())
    if i in user_progress[uid][dstr]:
        user_progress[uid][dstr].remove(i)
    else:
        user_progress[uid][dstr].add(i)
    kb = exercises_keyboard(dstr, day_key, uid)
    await cb.message.edit_reply_markup(reply_markup=kb)
    await cb.answer("–û–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

@dp.callback_query(F.data.startswith("rtoggle:"))
async def toggle_rest(cb: types.CallbackQuery):
    # rtoggle:YYYY-MM-DD:index
    _, dstr, idx = cb.data.split(":")
    i = int(idx)
    uid = cb.from_user.id
    user_rest.setdefault(uid, {}).setdefault(dstr, set())
    if i in user_rest[uid][dstr]:
        user_rest[uid][dstr].remove(i)
    else:
        user_rest[uid][dstr].add(i)
    kb = rest_keyboard(dstr, uid)
    await cb.message.edit_reply_markup(reply_markup=kb)
    await cb.answer("–û–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# ===== –•–ê–†–ß–£–í–ê–ù–ù–Ø =====
@dp.callback_query(F.data == "nutrition_menu")
async def nutrition_menu(cb: types.CallbackQuery):
    await cb.message.answer(render_nutrition_today(cb.from_user.id), reply_markup=nutrition_keyboard())
    await cb.answer()

@dp.callback_query(F.data == "nut:show_today")
async def nutrition_show_today(cb: types.CallbackQuery):
    await cb.message.answer(render_nutrition_today(cb.from_user.id), reply_markup=nutrition_keyboard())
    await cb.answer()

# –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–π–æ–º —ó–∂—ñ (–Ω–∞–∑–≤–∞ + –∫–∫–∞–ª)
@dp.callback_query(F.data == "nut:add_meal")
async def nut_add_meal(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddMeal.waiting_name)
    await state.update_data(tmp_meal={})
    await cb.message.answer("–í–≤–µ–¥–∏ <b>–Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏</b>:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="back")]]))
    await cb.answer()

@dp.message(AddMeal.waiting_name)
async def nut_meal_got_name(msg: types.Message, state: FSMContext):
    tmp = (await state.get_data()).get("tmp_meal", {})
    tmp["name"] = msg.text.strip()
    await state.update_data(tmp_meal=tmp)
    await state.set_state(AddMeal.waiting_kcal)
    await msg.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ <b>–∫–∞–ª–æ—Ä—ñ—ó</b> —Ü—ñ—î—ó —Å—Ç—Ä–∞–≤–∏ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 360):")

@dp.message(AddMeal.waiting_kcal)
async def nut_meal_got_kcal(msg: types.Message, state: FSMContext):
    text = msg.text.strip().replace(",", ".")
    if not text.replace(".", "", 1).isdigit():
        await msg.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –±—É–¥—å –ª–∞—Å–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 360)")
        return
    kcal = int(float(text))
    uid = msg.from_user.id
    dstr = today_str()
    data = await state.get_data()
    name = data.get("tmp_meal", {}).get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
    nd = ensure_day(uid, dstr)
    nd["meals"].append({"name": name, "kcal": kcal})
    await state.clear()
    await msg.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ: <b>{name}</b> ‚Äî {kcal} –∫–∫–∞–ª", reply_markup=nutrition_keyboard())

# –î–æ–¥–∞—Ç–∏ –±—ñ–ª–æ–∫ (–≥)
@dp.callback_query(F.data == "nut:add_protein")
async def nut_add_protein(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddProtein.waiting_value)
    await cb.message.answer("–í–≤–µ–¥–∏ <b>–∑–∞–≥–∞–ª—å–Ω–∏–π –±—ñ–ª–æ–∫ –∑–∞ –¥–µ–Ω—å</b> —É –≥—Ä–∞–º–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="back")]]))
    await cb.answer()

@dp.message(AddProtein.waiting_value)
async def nut_protein_value(msg: types.Message, state: FSMContext):
    v = msg.text.strip()
    if not v.isdigit():
        await msg.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –±—É–¥—å –ª–∞—Å–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150)")
        return
    grams = int(v)
    uid = msg.from_user.id
    dstr = today_str()
    nd = ensure_day(uid, dstr)
    nd["protein_g"] = grams
    await state.clear()
    await msg.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –±—ñ–ª–æ–∫: {grams} –≥", reply_markup=nutrition_keyboard())

# –î–æ–¥–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó —á–∏—Å–ª–æ–º (—Ä—É—á–Ω–∏–π —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç)
@dp.callback_query(F.data == "nut:add_kcal")
async def nut_add_kcal(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddKcal.waiting_value)
    await cb.message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –∫–∞–ª–æ—Ä—ñ–π (–º–æ–∂–Ω–∞ –∑ ¬´+¬ª –∞–±–æ ¬´-¬ª, –Ω–∞–ø—Ä. <b>+360</b> –∞–±–æ <b>-120</b>):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="back")]]))
    await cb.answer()

@dp.message(AddKcal.waiting_value)
async def nut_kcal_value(msg: types.Message, state: FSMContext):
    raw = msg.text.strip().replace(",", ".")
    sign = 1
    if raw.startswith("+"):
        raw = raw[1:]
    elif raw.startswith("-"):
        sign = -1
        raw = raw[1:]
    if not raw.replace(".", "", 1).isdigit():
        await msg.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –±—É–¥—å –ª–∞—Å–∫–∞ (–Ω–∞–ø—Ä. +360 –∞–±–æ -120)")
        return
    delta = int(float(raw)) * sign
    uid = msg.from_user.id
    dstr = today_str()
    nd = ensure_day(uid, dstr)
    nd["kcal_add"] = int(nd.get("kcal_add", 0)) + delta
    await state.clear()
    await msg.answer(f"‚úÖ –ó–º—ñ–Ω–∞ –∫–∞–ª–æ—Ä—ñ–π: {('+' if delta>=0 else '')}{delta} –∫–∫–∞–ª", reply_markup=nutrition_keyboard())

# –í–≤–µ—Å—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –∫–∞–ª–æ—Ä—ñ–π –≤—Ä—É—á–Ω—É
@dp.callback_query(F.data == "nut:add_total")
async def nut_add_total(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddTotal.waiting_value)
    await cb.message.answer("–í–≤–µ–¥–∏ <b>–ø—ñ–¥—Å—É–º–æ–∫ –∫–∞–ª–æ—Ä—ñ–π –∑–∞ –¥–µ–Ω—å</b> (—á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä. 1650):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="back")]]))
    await cb.answer()

@dp.message(AddTotal.waiting_value)
async def nut_total_value(msg: types.Message, state: FSMContext):
    v = msg.text.strip().replace(",", ".")
    if not v.replace(".", "", 1).isdigit():
        await msg.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –±—É–¥—å –ª–∞—Å–∫–∞ (–Ω–∞–ø—Ä. 1650)")
        return
    total = int(float(v))
    uid = msg.from_user.id
    dstr = today_str()
    nd = ensure_day(uid, dstr)
    nd["total_kcal_manual"] = total
    await state.clear()
    await msg.answer(f"‚úÖ –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è: {total} –∫–∫–∞–ª", reply_markup=nutrition_keyboard())

# ===== –ê–ö–¢–ò–í–ù–û–°–¢–Ü (—Ä—É—á–Ω–∏–π –≤–≤—ñ–¥ –Ω–∞–∑–≤–∏ + —Å–ø–∞–ª–µ–Ω—ñ –∫–∫–∞–ª) =====
@dp.callback_query(F.data == "act:add")
async def act_add(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddActivity.waiting_name)
    await cb.message.answer("–í–≤–µ–¥–∏ <b>–Ω–∞–∑–≤—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</b> (–Ω–∞–ø—Ä. ¬´–ë—ñ–≥ 5 –∫–º¬ª):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="back")]]))
    await cb.answer()

@dp.message(AddActivity.waiting_name)
async def act_got_name(msg: types.Message, state: FSMContext):
    await state.update_data(act_name=msg.text.strip())
    await state.set_state(AddActivity.waiting_kcal)
    await msg.answer("–°–∫—ñ–ª—å–∫–∏ –∫–∞–ª–æ—Ä—ñ–π <b>—Å–ø–∞–ª–µ–Ω–æ</b>? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä. 300):")

@dp.message(AddActivity.waiting_kcal)
async def act_got_kcal(msg: types.Message, state: FSMContext):
    v = msg.text.strip().replace(",", ".")
    if not v.replace(".", "", 1).isdigit():
        await msg.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –±—É–¥—å –ª–∞—Å–∫–∞ (–Ω–∞–ø—Ä. 300)")
        return
    kcal = int(float(v))
    uid = msg.from_user.id
    dstr = today_str()
    nd = ensure_day(uid, dstr)
    name = (await state.get_data()).get("act_name", "–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
    nd["activities"].append({"name": name, "kcal": kcal})
    nd["burned_kcal"] = int(nd.get("burned_kcal", 0)) + kcal
    await state.clear()
    await msg.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: <b>{name}</b> ‚Äî {kcal} –∫–∫–∞–ª üî•", reply_markup=main_menu())

# ===== –ó–ê–ö–†–ò–¢–ò –î–ï–ù–¨ =====
@dp.callback_query(F.data == "day:close")
async def close_day(cb: types.CallbackQuery):
    uid = cb.from_user.id
    d = dt.date.today()
    dstr = d.isoformat()
    nd = ensure_day(uid, dstr)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
    intake = calc_intake_kcal(nd)
    protein = nd.get("protein_g", None)
    day_key = weekday_key_by_date(d)

    missing = []
    if intake == 0:
        missing.append("–∫–∞–ª–æ—Ä—ñ—ó")
    if not isinstance(protein, int) or protein <= 0:
        missing.append("–±—ñ–ª–æ–∫")
    if day_key:
        total_ex = len(WORKOUTS[day_key]["exercises"])
        done_ex = len(user_progress.get(uid, {}).get(dstr, set()))
        if done_ex == 0:
            missing.append("—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
    else:
        done_cnt = len(user_rest.get(uid, {}).get(dstr, set()))
        if done_cnt == 0:
            missing.append("rest‚Äë—á–µ–∫–ª—ñ—Å—Ç")

    if missing:
        nd["day_status"] = "INCOMPLETE"
        nd["closed"] = True
        text = "üîí –î–µ–Ω—å –∑–∞–∫—Ä–∏—Ç–æ –∑ —Å—Ç–∞—Ç—É—Å–æ–º: <b>–ù–ï–ü–û–í–ù–ò–ô</b>\n–ù–µ –≤–∏—Å—Ç–∞—á–∞—î: " + ", ".join(missing)
    else:
        nd["day_status"] = "OK"
        nd["closed"] = True
        text = "‚úÖ –î–µ–Ω—å –∑–∞–∫—Ä–∏—Ç–æ: <b>OK</b>. –ö—Ä–∞—Å–∏–≤–æ!"

    intake = calc_intake_kcal(nd)
    burned = calc_burned_kcal(nd)
    net = intake - burned
    text += f"\n\n–ü—ñ–¥—Å—É–º–æ–∫: üçΩ {intake} | üî• {burned} | ‚öñÔ∏è {net} –∫–∫–∞–ª"
    await cb.message.answer(text, reply_markup=main_menu())
    await cb.answer()

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê (14 –¥–Ω—ñ–≤) =====
@dp.callback_query(F.data == "stats")
async def show_statistics(cb: types.CallbackQuery):
    uid = cb.from_user.id
    today = dt.date.today()
    start = today - dt.timedelta(days=13)

    lines = ["üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Å—Ç. 14 –¥–Ω—ñ–≤)</b>"]
    sessions_done = 0
    sessions_total = 0
    rest_done_days = 0
    rest_total_days = 0
    cardio_total = 0
    kcal_intake_sum = 0
    kcal_burn_sum = 0
    days_for_intake = 0
    days_for_burn = 0

    for i in range(14):
        day = start + dt.timedelta(days=i)
        dstr = day.isoformat()
        dshort = weekday_short_ua(day)
        day_key = weekday_key_by_date(day)

        nd = user_nutrition.get(uid, {}).get(dstr, {})
        intake = calc_intake_kcal(nd) if nd else 0
        burned = calc_burned_kcal(nd) if nd else 0
        net = intake - burned
        status = nd.get("day_status") if nd else None

        if intake:
            kcal_intake_sum += intake
            days_for_intake += 1
        if burned:
            kcal_burn_sum += burned
            days_for_burn += 1

        cardio_cnt = len(user_cardio.get(uid, {}).get(dstr, []))
        cardio_total += cardio_cnt

        if day_key:
            total_ex = len(WORKOUTS[day_key]["exercises"])
            done_ex = len(user_progress.get(uid, {}).get(dstr, set()))
            if total_ex > 0:
                sessions_total += 1
                if done_ex == total_ex:
                    sessions_done += 1
            line = f"{dshort} {dstr} ‚Äî {WORKOUTS[day_key]['title']} | {done_ex}/{total_ex}"
        else:
            rest_total_days += 1
            done_cnt = len(user_rest.get(uid, {}).get(dstr, set()))
            if done_cnt == len(REST_TODO) and len(REST_TODO) > 0:
                rest_done_days += 1
            line = f"{dshort} {dstr} ‚Äî Rest Day | {done_cnt}/{len(REST_TODO)}"

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
        if cardio_cnt:
            line += f" | üèÉ {cardio_cnt}"
        if intake:
            line += f" | üçΩ {intake}"
        if burned:
            line += f" | üî• {burned}"
        if intake or burned:
            line += f" | ‚öñÔ∏è {net}"
        if status:
            line += f" | –°—Ç–∞—Ç—É—Å: {('OK' if status=='OK' else '–ù–ï–ü–û–í–ù–ò–ô')}"

        lines.append(line)

    rate = f"{(sessions_done / sessions_total * 100):.0f}%" if sessions_total else "0%"
    avg_intake = f"{(kcal_intake_sum / days_for_intake):.0f}" if days_for_intake else "‚Äî"
    avg_burn = f"{(kcal_burn_sum / days_for_burn):.0f}" if days_for_burn else "‚Äî"
    avg_net = (kcal_intake_sum - kcal_burn_sum)
    avg_net = f"{(avg_net / max(1, max(days_for_intake, days_for_burn))):.0f}"

    lines.append("\n<b>–ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ 14 –¥–Ω—ñ–≤</b>")
    lines.append(f"‚Ä¢ –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {sessions_done}/{sessions_total} ({rate})")
    lines.append(f"‚Ä¢ Rest Days –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–∫—Ä–∏—Ç—ñ: {rest_done_days}/{rest_total_days}")
    lines.append(f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ–π–∫/–¥–µ–Ω—å: {avg_intake} –∫–∫–∞–ª")
    lines.append(f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—î —Å–ø–∞–ª–µ–Ω–æ/–¥–µ–Ω—å: {avg_burn} –∫–∫–∞–ª")
    lines.append(f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—î –Ω–µ—Ç—Ç–æ/–¥–µ–Ω—å: {avg_net} –∫–∫–∞–ª")

    await cb.message.answer("\n".join(lines), reply_markup=main_menu())
    await cb.answer()

# ===== –©–û–î–ï–ù–ù–ò–ô –ü–Ü–ù–ì 21:30 =====
async def daily_nutrition_ping():
    text = (
        "‚è∞ <b>–ö—ñ–Ω–µ—Ü—å –¥–Ω—è</b>\n"
        "–°–∫–∏–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ —ó–≤ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –∫–∞–ª–æ—Ä—ñ—ó/–±—ñ–ª–æ–∫.\n"
        "–ú–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –ø—Ä–∏–π–æ–º–∏ —ó–∂—ñ, —Ä—É—á–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó –∞–±–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç—É—Ç:"
    )
    for uid in list(subscribers):
        try:
            await bot.send_message(uid, text, reply_markup=nutrition_keyboard())
        except Exception:
            pass

async def on_startup():
    scheduler.add_job(daily_nutrition_ping, "cron", hour=21, minute=30)
    scheduler.start()

@dp.callback_query(F.data == "back")
async def go_back(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é", reply_markup=main_menu())
    await cb.answer()

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
