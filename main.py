import os
import asyncio
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
openai = OpenAI(api_key=OPENAI_API_KEY)

# üìå –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤
user_progress = {}

TRAINING_PLAN = {
    "monday": [
        {"exercise": "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–¥–∏", "sets": 4, "reps": 12},
        {"exercise": "–ü—ñ–¥–π–æ–º –≥–∞–Ω—Ç–µ–ª–µ–π –≤ —Å—Ç–æ—Ä–æ–Ω–∏", "sets": 3, "reps": 15},
        {"exercise": "–§—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π –∂–∏–º", "sets": 4, "reps": 10}
    ],
    "wednesday": [
        {"exercise": "–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑ —É—Ç—Ä–∏–º–∞–Ω–Ω—è–º", "sets": 4, "reps": 8},
        {"exercise": "–ó–≤–µ–¥–µ–Ω–Ω—è –≥–∞–Ω—Ç–µ–ª–µ–π –∑–∞ —Å–ø–∏–Ω—É", "sets": 3, "reps": 12},
        {"exercise": "–ú–æ–ª–æ—Ç–∫–æ–≤–∞ –∑ –≥—Ä–∏—Ñ–æ–º", "sets": 4, "reps": 10}
    ],
    "friday": [
        {"exercise": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑ –≥–∞–Ω—Ç–µ–ª—è–º–∏", "sets": 4, "reps": 15},
        {"exercise": "–†—É–º—É–Ω—Å—å–∫–∞ —Ç—è–≥–∞", "sets": 3, "reps": 12},
        {"exercise": "–°–∫—Ä—É—á—É–≤–∞–Ω–Ω—è –Ω–∞ –ø—Ä–µ—Å", "sets": 4, "reps": 20}
    ]
}

def get_weekday():
    return datetime.datetime.now().strftime("%A").lower()

def generate_workout_keyboard(user_id, day_key):
    keyboard = []
    progress = user_progress.get(user_id, {}).get(day_key, {})
    for i, ex in enumerate(TRAINING_PLAN[day_key]):
        done_sets = progress.get(i, 0)
        label = f"{ex['exercise']} ‚Äî {done_sets}/{ex['sets']} –ø—ñ–¥—Ö–æ–¥—ñ–≤"
        callback_data = f"set_{day_key}_{i}"
        keyboard.append([InlineKeyboardButton(text=label, callback_data=callback_data)])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(CommandStart())
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùì –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ?", callback_data="today")]
    ])
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=keyboard)

@dp.callback_query(F.data == "today")
async def today_plan(callback: CallbackQuery):
    user_id = callback.from_user.id
    day = get_weekday()
    if day in TRAINING_PLAN:
        text = "<b>–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</b>\n"
        for ex in TRAINING_PLAN[day]:
            text += f"‚Ä¢ {ex['exercise']} ‚Äî {ex['sets']}x{ex['reps']}\n"
        await callback.message.answer(text, reply_markup=generate_workout_keyboard(user_id, day))
    else:
        await callback.message.answer("–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∫–∞—Ä–¥—ñ–æ üö∂‚Äç‚ôÇÔ∏è")
    await callback.answer()

@dp.callback_query(F.data.startswith("set_"))
async def handle_set(callback: CallbackQuery):
    user_id = callback.from_user.id
    _, day_key, index = callback.data.split("_")
    index = int(index)

    progress = user_progress.setdefault(user_id, {}).setdefault(day_key, {})
    progress[index] = min(progress.get(index, 0) + 1, TRAINING_PLAN[day_key][index]['sets'])

    await callback.message.edit_reply_markup(reply_markup=generate_workout_keyboard(user_id, day_key))
    await callback.answer("‚úÖ –ü—ñ–¥—Ö—ñ–¥ –≤—ñ–¥–º—ñ—á–µ–Ω–æ")

@dp.callback_query(F.data == "back")
async def go_back(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùì –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ?", callback_data="today")]
    ])
    await callback.message.edit_text("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å", reply_markup=keyboard)
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
