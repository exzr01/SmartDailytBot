import os
import asyncio
import datetime as dt
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler(timezone=ZoneInfo("Europe/Kyiv"))

# --- –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ---
WORKOUTS = {
    "monday": {
        "title": "üî¥ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ ‚Äì –ì–†–£–î–ò + –¢–†–Ü–¶–ï–ü–° + –ü–ï–†–ï–î–ù–Ø –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞—á–∏", "4√ó8"),
            ("–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ø—ñ–¥ –∫—É—Ç–æ–º", "3√ó10"),
            ("–ö—Ä–æ—Å–æ–≤–µ—Ä", "3√ó12"),
            ("–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è –Ω–∞ –±—Ä—É—Å–∞—Ö", "3√ó–º–∞–∫—Å"),
            ("–ñ–∏–º –≤–Ω–∏–∑ –Ω–∞ —Ç—Ä—ñ—Ü–µ–ø—Å (–∫–∞–Ω–∞—Ç)", "3√ó12"),
            ("–§—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π –∂–∏–º", "3√ó10"),
            ("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ñ –ø—ñ–¥–π–æ–º–∏ –≥–∞–Ω—Ç–µ–ª–µ–π", "3√ó15")
        ]
    },
    "wednesday": {
        "title": "üîµ –°–µ—Ä–µ–¥–∞ ‚Äì –°–ü–ò–ù–ê + –ë–Ü–¶–ï–ü–° + –ó–ê–î–ù–Ø –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –±–ª–æ–∫—É", "4√ó10"),
            ("–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞—Ö–∏–ª—ñ", "3√ó10"),
            ("–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è / –Ω–∏–∂–Ω—è —Ç—è–≥–∞", "3√ó–º–∞–∫—Å"),
            ("–ü—ñ–¥–π–æ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±—ñ—Ü–µ–ø—Å", "3√ó12"),
            ("–ú–æ–ª–æ—Ç–∫–∏", "3√ó12"),
            ("–ó–≤–æ—Ä–æ—Ç–Ω—ñ –º–∞—Ö–∏ –≤ –Ω–∞—Ö–∏–ª—ñ", "3√ó15")
        ]
    },
    "friday": {
        "title": "üü¢ –ü‚Äô—è—Ç–Ω–∏—Ü—è ‚Äì –ù–û–ì–ò + –ü–†–ï–° + –ë–Ü–ß–ù–ê –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–ñ–∏–º –Ω–æ–≥–∞–º–∏ / –ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è", "4√ó10"),
            ("–†—É–º—É–Ω—Å—å–∫–∞ —Ç—è–≥–∞", "3√ó12"),
            ("–í–∏–ø–∞–¥–∏", "3√ó10 –Ω–∞ –Ω–æ–≥—É"),
            ("–ü—Ä–µ—Å", "3√ó15"),
            ("–ë—ñ—á–Ω—ñ –º–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏ —Å—Ç–æ—è—á–∏", "3√ó15"),
            ("–ë—ñ—á–Ω—ñ –º–∞—Ö–∏ —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ", "3√ó15")
        ]
    }
}

# --- Rest Day —á–µ–∫–ª—ñ—Å—Ç ---
REST_TODO = [
    "Zone 2 ‚Äî 30‚Äì40 —Ö–≤",
    "10 000 –∫—Ä–æ–∫—ñ–≤",
    "–ú–æ–±—ñ–ª—å–Ω—ñ—Å—Ç—å ‚Äî 12 —Ö–≤",
    "Core ‚Äî 8 —Ö–≤",
    "–î–∏—Ö–∞–Ω–Ω—è ‚Äî 5 —Ö–≤",
    "–†–æ–ª–µ—Ä/–º–∞—Å–∞–∂ ‚Äî 5‚Äì7 —Ö–≤",
    "–ì—ñ–¥—Ä–∞—Ü—ñ—è/—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ",
    "–°–æ–Ω ‚Äî –ø–ª–∞–Ω –Ω–∞ –Ω—ñ—á"
]

# ===== –ó–ë–ï–†–Ü–ì–ê–ù–ù–Ø –°–¢–ê–ù–£ (–≤ –ø–∞–º‚Äô—è—Ç—ñ –ø—Ä–æ—Ü–µ—Å—É) =====
# –ø—Ä–æ–≥—Ä–µ—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø–æ –¥–∞—Ç—ñ
user_progress: dict[int, dict[str, set[int]]] = {}          # {uid: {YYYY-MM-DD: set(ex_idx)}}
# —á–µ–∫–ª—ñ—Å—Ç Rest Day –ø–æ –¥–∞—Ç—ñ
user_rest: dict[int, dict[str, set[int]]] = {}              # {uid: {YYYY-MM-DD: set(item_idx)}}
# –∫–∞—Ä–¥—ñ–æ/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–æ –¥–∞—Ç—ñ
user_cardio: dict[int, dict[str, list[str]]] = {}           # {uid: {YYYY-MM-DD: [labels...]}}
# —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –ø–æ –¥–∞—Ç—ñ
user_nutrition: dict[int, dict[str, dict]] = {}             # {uid: {YYYY-MM-DD: {"meals":[{"name","kcal"}], "protein_g": int}}}
# –∞–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ø—ñ–Ω–≥—É)
subscribers: set[int] = set()

# ===== –î–ê–¢–ò / –î–ù–Ü =====
def today_str() -> str:
    return dt.date.today().isoformat()

def weekday_key_by_date(d: dt.date) -> str | None:
    return {0: "monday", 2: "wednesday", 4: "friday"}.get(d.weekday())

def weekday_short_ua(d: dt.date) -> str:
    return ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–ù–¥"][d.weekday()]

# ===== –ö–ù–û–ü–ö–ò =====
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="workout_today")],
        [InlineKeyboardButton(text="üçΩ –•–∞—Ä—á—É–≤–∞–Ω–Ω—è", callback_data="nutrition_menu")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])

def exercises_keyboard(date_str: str, day_key: str, uid: int):
    done = user_progress.get(uid, {}).get(date_str, set())
    rows = []
    for i, (exercise, reps) in enumerate(WORKOUTS[day_key]["exercises"]):
        mark = "‚úÖ" if i in done else "‚¨úÔ∏è"
        rows.append([InlineKeyboardButton(
            text=f"{mark} {exercise} ({reps})",
            callback_data=f"toggle:{date_str}:{day_key}:{i}"
        )])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def rest_keyboard(date_str: str, uid: int):
    done = user_rest.get(uid, {}).get(date_str, set())
    rows = []
    for i, item in enumerate(REST_TODO):
        mark = "‚úÖ" if i in done else "‚¨úÔ∏è"
        rows.append([InlineKeyboardButton(
            text=f"{mark} {item}",
            callback_data=f"rtoggle:{date_str}:{i}"
        )])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def nutrition_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–π–æ–º —ó–∂—ñ", callback_data="nut:add_meal")],
        [InlineKeyboardButton(text="üçó –î–æ–¥–∞—Ç–∏ –±—ñ–ª–æ–∫ (–≥/–¥–µ–Ω—å)", callback_data="nut:add_protein")],
        [InlineKeyboardButton(text="üßÆ –í–≤–µ—Å—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –∫–∞–ª–æ—Ä—ñ–π", callback_data="nut:add_total")],
        [InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–ø–∏—Å–∏ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data="nut:show_today")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# ===== FSM –î–õ–Ø –•–ê–†–ß–£–í–ê–ù–ù–Ø =====
class AddMeal(StatesGroup):
    waiting_name = State()
    waiting_kcal = State()

class AddProtein(StatesGroup):
    waiting_value = State()

class AddTotal(StatesGroup):
    waiting_value = State()

# ===== –†–ï–ù–î–ï–† –°–¢–û–†–Ü–ù–û–ö =====
def render_workout_today(uid: int) -> tuple[str, InlineKeyboardMarkup]:
    d = dt.date.today()
    dstr = d.isoformat()
    day_key = weekday_key_by_date(d)
    if not day_key:
        text = "<b>Rest Day</b>\n–õ–µ–≥–∫–∏–π –¥–µ–Ω—å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è. –í—ñ–¥–º—ñ—á–∞–π –≤–∏–∫–æ–Ω–∞–Ω–µ üëá"
        return text, rest_keyboard(dstr, uid)
    title = WORKOUTS[day_key]["title"]
    text = f"<b>{title}</b>\n–û–±–∏—Ä–∞–π –≤–ø—Ä–∞–≤–∏ —Ç–∞ –≤—ñ–¥–º—ñ—á–∞–π –≤–∏–∫–æ–Ω–∞–Ω–µ:"
    return text, exercises_keyboard(dstr, day_key, uid)

def render_nutrition_today(uid: int) -> str:
    dstr = today_str()
    data = user_nutrition.get(uid, {}).get(dstr, {})
    meals = data.get("meals", [])
    protein = data.get("protein_g", 0)
    kcal_total = sum(int(m["kcal"]) for m in meals) if meals else 0
    if meals:
        meals_lines = "\n".join([f"‚Ä¢ {m['name']} ‚Äî {m['kcal']} –∫–∫–∞–ª" for m in meals])
    else:
        meals_lines = "‚Äî"
    return (
        f"üçΩ <b>–•–∞—Ä—á—É–≤–∞–Ω–Ω—è {dstr}</b>\n"
        f"{meals_lines}\n"
        f"‚Äî‚Äî‚Äî\n"
        f"–°—É–º–∞—Ä–Ω–æ: <b>{kcal_total}</b> –∫–∫–∞–ª\n"
        f"–ë—ñ–ª–æ–∫: <b>{protein}</b> –≥"
    )

# ===== –•–ï–ù–î–õ–ï–†–ò /start =====
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    subscribers.add(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())

# ===== –¢–†–ï–ù–£–í–ê–ù–ù–Ø =====
@dp.callback_query(F.data == "workout_today")
async def workout_today(cb: types.CallbackQuery):
    text, kb = render_workout_today(cb.from_user.id)
    await cb.message.answer(text, reply_markup=kb)
    await cb.answer()

@dp.callback_query(F.data.startswith("toggle:"))
async def toggle_exercise(cb: types.CallbackQuery):
    # toggle:YYYY-MM-DD:day_key:index
    _, dstr, day_key, idx = cb.data.split(":")
    i = int(idx)
    uid = cb.from_user.id
    user_progress.setdefault(uid, {}).setdefault(dstr, set())
    if i in user_progress[uid][dstr]:
        user_progress[uid][dstr].remove(i)
    else:
        user_progress[uid][dstr].add(i)
    kb = exercises_keyboard(dstr, day_key, uid)
    await cb.message.edit_reply_markup(reply_markup=kb)
    await cb.answer("–û–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

@dp.callback_query(F.data.startswith("rtoggle:"))
async def toggle_rest(cb: types.CallbackQuery):
    # rtoggle:YYYY-MM-DD:index
    _, dstr, idx = cb.data.split(":")
    i = int(idx)
    uid = cb.from_user.id
    user_rest.setdefault(uid, {}).setdefault(dstr, set())
    if i in user_rest[uid][dstr]:
        user_rest[uid][dstr].remove(i)
    else:
        user_rest[uid][dstr].add(i)
    kb = rest_keyboard(dstr, uid)
    await cb.message.edit_reply_markup(reply_markup=kb)
    await cb.answer("–û–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# ===== –•–ê–†–ß–£–í–ê–ù–ù–Ø =====
@dp.callback_query(F.data == "nutrition_menu")
async def nutrition_menu(cb: types.CallbackQuery):
    await cb.message.answer(render_nutrition_today(cb.from_user.id), reply_markup=nutrition_keyboard())
    await cb.answer()

@dp.callback_query(F.data == "nut:show_today")
async def nutrition_show_today(cb: types.CallbackQuery):
    await cb.message.answer(render_nutrition_today(cb.from_user.id), reply_markup=nutrition_keyboard())
    await cb.answer()

@dp.callback_query(F.data == "nut:add_meal")
async def nut_add_meal(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddMeal.waiting_name)
    await state.update_data(tmp_meal={})
    await cb.message.answer("–í–≤–µ–¥–∏ <b>–Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏</b> (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: ¬´–û–º–ª–µ—Ç –∑ —Å–∏—Ä–æ–º¬ª):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="back")]]))
    await cb.answer()

@dp.message(AddMeal.waiting_name)
async def nut_meal_got_name(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    tmp = data.get("tmp_meal", {})
    tmp["name"] = msg.text.strip()
    await state.update_data(tmp_meal=tmp)
    await state.set_state(AddMeal.waiting_kcal)
    await msg.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ <b>–∫–∞–ª–æ—Ä—ñ—ó</b> —Ü—ñ—î—ó —Å—Ç—Ä–∞–≤–∏ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 320):")

@dp.message(AddMeal.waiting_kcal)
async def nut_meal_got_kcal(msg: types.Message, state: FSMContext):
    text = msg.text.strip().replace(",", ".")
    if not text.replace(".", "", 1).isdigit():
        await msg.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –±—É–¥—å –ª–∞—Å–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 320)")
        return
    kcal = int(float(text))
    uid = msg.from_user.id
    dstr = today_str()

    data = await state.get_data()
    tmp = data.get("tmp_meal", {})
    name = tmp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")

    user_nutrition.setdefault(uid, {}).setdefault(dstr, {}).setdefault("meals", [])
    user_nutrition[uid][dstr]["meals"].append({"name": name, "kcal": kcal})

    await state.clear()
    await msg.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ: <b>{name}</b> ‚Äî {kcal} –∫–∫–∞–ª", reply_markup=nutrition_keyboard())

@dp.callback_query(F.data == "nut:add_protein")
async def nut_add_protein(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddProtein.waiting_value)
    await cb.message.answer("–í–≤–µ–¥–∏ <b>–∑–∞–≥–∞–ª—å–Ω–∏–π –±—ñ–ª–æ–∫ –∑–∞ –¥–µ–Ω—å</b> —É –≥—Ä–∞–º–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="back")]]))
    await cb.answer()

@dp.message(AddProtein.waiting_value)
async def nut_protein_value(msg: types.Message, state: FSMContext):
    v = msg.text.strip()
    if not v.isdigit():
        await msg.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –±—É–¥—å –ª–∞—Å–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150)")
        return
    grams = int(v)
    uid = msg.from_user.id
    dstr = today_str()
    user_nutrition.setdefault(uid, {}).setdefault(dstr, {})["protein_g"] = grams
    await state.clear()
    await msg.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –±—ñ–ª–æ–∫: {grams} –≥", reply_markup=nutrition_keyboard())

@dp.callback_query(F.data == "nut:add_total")
async def nut_add_total(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddTotal.waiting_value)
    await cb.message.answer("–í–≤–µ–¥–∏ <b>–ø—ñ–¥—Å—É–º–æ–∫ –∫–∞–ª–æ—Ä—ñ–π –∑–∞ –¥–µ–Ω—å</b> (—á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1650):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="back")]]))
    await cb.answer()

@dp.message(AddTotal.waiting_value)
async def nut_total_value(msg: types.Message, state: FSMContext):
    v = msg.text.strip().replace(",", ".")
    if not v.replace(".", "", 1).isdigit():
        await msg.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –±—É–¥—å –ª–∞—Å–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1650)")
        return
    total = int(float(v))
    uid = msg.from_user.id
    dstr = today_str()
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –æ–∫—Ä–µ–º–µ –ø–æ–ª–µ, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –∞–±–æ —Å—É–º—É–≤–∞—Ç–∏ –∑ –ø—Ä–∏–π–æ–º—ñ–≤, –∞–±–æ –±—Ä–∞—Ç–∏ —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    user_nutrition.setdefault(uid, {}).setdefault(dstr, {})["total_kcal_manual"] = total
    await state.clear()
    await msg.answer(f"‚úÖ –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è: {total} –∫–∫–∞–ª", reply_markup=nutrition_keyboard())

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê (14 –¥–Ω—ñ–≤) =====
@dp.callback_query(F.data == "stats")
async def show_statistics(cb: types.CallbackQuery):
    uid = cb.from_user.id
    today = dt.date.today()
    start = today - dt.timedelta(days=13)

    lines = ["üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Å—Ç. 14 –¥–Ω—ñ–≤)</b>"]
    sessions_done = 0
    sessions_total = 0
    rest_done_days = 0
    rest_total_days = 0
    cardio_total = 0
    kcal_total_sum = 0
    protein_total_sum = 0
    days_count_for_kcal = 0
    days_count_for_protein = 0

    for i in range(14):
        day = start + dt.timedelta(days=i)
        dstr = day.isoformat()
        dshort = weekday_short_ua(day)
        day_key = weekday_key_by_date(day)

        # nutrition
        nd = user_nutrition.get(uid, {}).get(dstr, {})
        meals = nd.get("meals", [])
        protein = nd.get("protein_g", None)
        kcal_from_meals = sum(int(m["kcal"]) for m in meals) if meals else 0
        kcal_manual = nd.get("total_kcal_manual", None)
        kcal_total = kcal_manual if isinstance(kcal_manual, int) else kcal_from_meals

        if kcal_total:
            kcal_total_sum += kcal_total
            days_count_for_kcal += 1
        if isinstance(protein, int):
            protein_total_sum += protein
            days_count_for_protein += 1

        # cardio
        cardio_cnt = len(user_cardio.get(uid, {}).get(dstr, []))
        cardio_total += cardio_cnt

        if day_key:
            total_ex = len(WORKOUTS[day_key]["exercises"])
            done_ex = len(user_progress.get(uid, {}).get(dstr, set()))
            status = f"{done_ex}/{total_ex} {'‚úÖ' if done_ex > 0 else '‚ùå'}"
            sessions_total += 1
            if done_ex == total_ex and total_ex > 0:
                sessions_done += 1
            lines.append(
                f"{dshort} {dstr} ‚Äî {WORKOUTS[day_key]['title']} | {status}"
                + (f" | üèÉ {cardio_cnt}" if cardio_cnt else "")
                + (f" | üçΩ {kcal_total} –∫–∫–∞–ª" if kcal_total else "")
                + (f" | üçó {protein} –≥" if isinstance(protein, int) else "")
            )
        else:
            rest_total_days += 1
            done_cnt = len(user_rest.get(uid, {}).get(dstr, set()))
            if done_cnt == len(REST_TODO) and len(REST_TODO) > 0:
                rest_done_days += 1
            lines.append(
                f"{dshort} {dstr} ‚Äî Rest Day | {done_cnt}/{len(REST_TODO)}"
                + (f" | üèÉ {cardio_cnt}" if cardio_cnt else "")
                + (f" | üçΩ {kcal_total} –∫–∫–∞–ª" if kcal_total else "")
                + (f" | üçó {protein} –≥" if isinstance(protein, int) else "")
            )

    # –ü—ñ–¥—Å—É–º–∫–∏
    rate = f"{(sessions_done / sessions_total * 100):.0f}%" if sessions_total else "0%"
    avg_kcal = f"{(kcal_total_sum / days_count_for_kcal):.0f}" if days_count_for_kcal else "‚Äî"
    avg_protein = f"{(protein_total_sum / days_count_for_protein):.0f}" if days_count_for_protein else "‚Äî"

    lines.append("\n<b>–ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ 14 –¥–Ω—ñ–≤</b>")
    lines.append(f"‚Ä¢ –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {sessions_done}/{sessions_total} ({rate})")
    lines.append(f"‚Ä¢ Rest Days –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–∫—Ä–∏—Ç—ñ: {rest_done_days}/{rest_total_days}")
    lines.append(f"‚Ä¢ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–∫–∞—Ä–¥—ñ–æ —Ç–æ—â–æ): {cardio_total}")
    lines.append(f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó/–¥–µ–Ω—å: {avg_kcal} –∫–∫–∞–ª")
    lines.append(f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π –±—ñ–ª–æ–∫/–¥–µ–Ω—å: {avg_protein} –≥")

    await cb.message.answer("\n".join(lines), reply_markup=main_menu())
    await cb.answer()

# ===== –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø –û 21:30 (Europe/Kyiv) =====
async def daily_nutrition_ping():
    text = (
        "‚è∞ <b>–ö—ñ–Ω–µ—Ü—å –¥–Ω—è</b>\n"
        "–°–∫–∏–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ —ó–≤ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –∫–∞–ª–æ—Ä—ñ—ó.\n"
        "–ú–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –ø—Ä–∏–π–æ–º–∏ —ó–∂—ñ/–±—ñ–ª–æ–∫/–ø—ñ–¥—Å—É–º–æ–∫ —Ç—É—Ç:"
    )
    for uid in list(subscribers):
        try:
            await bot.send_message(uid, text, reply_markup=nutrition_keyboard())
        except Exception:
            # –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —ñ–º–æ–≤—ñ—Ä–Ω–æ, –∑—É–ø–∏–Ω–∏–≤ –±–æ—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
            pass

async def on_startup():
    # —â–æ–¥–Ω—è –æ 21:30 –∑–∞ –ö–∏—î–≤–æ–º
    scheduler.add_job(daily_nutrition_ping, "cron", hour=21, minute=30)
    scheduler.start()

@dp.callback_query(F.data == "back")
async def go_back(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é", reply_markup=main_menu())
    await cb.answer()

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
