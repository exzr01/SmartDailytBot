import os
import asyncio
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set. Please add it to Railway ‚Üí Variables.")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY is not set. Please add it to Railway ‚Üí Variables.")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –†–æ–∑–∫–ª–∞–¥
WORKOUT_PLAN = {
    "monday": [
        {"exercise": "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–¥–∏", "sets": 4, "reps": 12},
        {"exercise": "–ü—ñ–¥–π–æ–º –≥–∞–Ω—Ç–µ–ª–µ–π –≤ —Å—Ç–æ—Ä–æ–Ω–∏", "sets": 3, "reps": 15},
        {"exercise": "–§—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π –∂–∏–º", "sets": 3, "reps": 12},
    ],
    "wednesday": [
        {"exercise": "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –¥–æ –ø–æ—è—Å—É", "sets": 4, "reps": 10},
        {"exercise": "–ó–≥–∏–Ω–∞–Ω–Ω—è —Ä—É–∫ –∑ –≥–∞–Ω—Ç–µ–ª—è–º–∏", "sets": 3, "reps": 12},
        {"exercise": "–ó–≤–æ—Ä–æ—Ç–Ω—ñ —Ä–æ–∑–≤–µ–¥–µ–Ω–Ω—è", "sets": 3, "reps": 15},
    ],
    "friday": [
        {"exercise": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑—ñ —à—Ç–∞–Ω–≥–æ—é", "sets": 4, "reps": 10},
        {"exercise": "–ü—ñ–¥–π–æ–º –Ω—ñ–≥ –Ω–∞ –ø—Ä–µ—Å", "sets": 3, "reps": 15},
        {"exercise": "–ñ–∏–º –Ω–æ–≥–∞–º–∏", "sets": 3, "reps": 12},
    ]
}

MEAL_PLAN = {
    "breakfast": "üçº –û–º–ª–µ—Ç –∑ –æ–≤–æ—á–∞–º–∏ –≤ –º—É–ª—å—Ç–∏–ø–µ—á—ñ",
    "lunch": "ü•ö –ö—É—Ä—è—á–µ —Ñ—ñ–ª–µ –∑ –±—Ä–æ–∫–æ–ª—ñ",
    "dinner": "üßÉ –†–∏–±–∞ –∑ –æ–≤–æ—á–∞–º–∏ –Ω–∞ –ø–∞—Ä—ñ"
}

completed_exercises = set()

# –ö–Ω–æ–ø–∫–∏
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùì –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ?", callback_data="today")],
    [InlineKeyboardButton(text="üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="workout")],
    [InlineKeyboardButton(text="üçΩÔ∏è –ú–µ–Ω—é", callback_data="menu")]
])

def get_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–Ω–æ–≤–∏—Ç–∏ —Å–Ω—ñ–¥–∞–Ω–æ–∫ —á–µ—Ä–µ–∑ GPT", callback_data="gpt_breakfast")],
        [InlineKeyboardButton(text="–û–Ω–æ–≤–∏—Ç–∏ –æ–±—ñ–¥ —á–µ—Ä–µ–∑ GPT", callback_data="gpt_lunch")],
        [InlineKeyboardButton(text="–û–Ω–æ–≤–∏—Ç–∏ –≤–µ—á–µ—Ä—é —á–µ—Ä–µ–∑ GPT", callback_data="gpt_dinner")],
    ])

def get_workout_day_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="show_workout")],
    ])

def get_workout_tracking_keyboard(weekday):
    buttons = []
    for i, ex in enumerate(WORKOUT_PLAN.get(weekday, [])):
        checked = "‚úÖ" if (weekday, i) in completed_exercises else ""
        buttons.append([InlineKeyboardButton(text=f"{checked} {ex['exercise']}", callback_data=f"toggle_{i}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø SmartDailyBot. –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu)

@dp.callback_query(F.data == "today")
async def today_plan(callback: types.CallbackQuery):
    weekday = datetime.datetime.now().strftime('%A').lower()
    workout_name = " + ".join([ex['exercise'] for ex in WORKOUT_PLAN.get(weekday, [])])
    if workout_name:
        workout_text = f"–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {workout_name}"
    else:
        workout_text = "–°—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ üåû"
    meals = f"\n\nüçº –°–Ω—ñ–¥–∞–Ω–æ–∫: {MEAL_PLAN['breakfast']}\nü•ö –û–±—ñ–¥: {MEAL_PLAN['lunch']}\nüßÉ –í–µ—á–µ—Ä—è: {MEAL_PLAN['dinner']}"
    await callback.message.answer(f"<b>–¢–≤—ñ–π –¥–µ–Ω—å:</b>\n\n{workout_text}{meals}")
    await callback.answer()

@dp.callback_query(F.data == "workout")
async def workout_details(callback: types.CallbackQuery):
    await callback.message.answer("–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=get_workout_day_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "show_workout")
async def show_workout(callback: types.CallbackQuery):
    weekday = datetime.datetime.now().strftime('%A').lower()
    workout = WORKOUT_PLAN.get(weekday, [])
    if not workout:
        await callback.message.answer("–°—å–æ–≥–æ–¥–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–µ–º–∞—î")
    else:
        await callback.message.answer("<b>–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:</b>", reply_markup=get_workout_tracking_keyboard(weekday))
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("toggle_"))
async def toggle_exercise(callback: types.CallbackQuery):
    index = int(callback.data.split("_")[1])
    weekday = datetime.datetime.now().strftime('%A').lower()
    key = (weekday, index)
    if key in completed_exercises:
        completed_exercises.remove(key)
    else:
        completed_exercises.add(key)
    await show_workout(callback)

@dp.callback_query(F.data == "menu")
async def menu_details(callback: types.CallbackQuery):
    meals = f"üçº –°–Ω—ñ–¥–∞–Ω–æ–∫: {MEAL_PLAN['breakfast']}\nü•ö –û–±—ñ–¥: {MEAL_PLAN['lunch']}\nüßÉ –í–µ—á–µ—Ä—è: {MEAL_PLAN['dinner']}"
    await callback.message.answer(f"<b>–ú–µ–Ω—é –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:</b>\n{meals}", reply_markup=get_menu_keyboard())
    await callback.answer()

@dp.callback_query(F.data.in_(["gpt_breakfast", "gpt_lunch", "gpt_dinner", "gpt_workout"]))
async def gpt_item_update(callback: types.CallbackQuery):
    item = callback.data.replace("gpt_", "")
    prompts = {
        "breakfast": "–ü—Ä–∏–¥—É–º–∞–π –Ω–æ–≤–∏–π —Å–Ω—ñ–¥–∞–Ω–æ–∫ –¥–ª—è –∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è –≤ –º—É–ª—å—Ç–∏–ø–µ—á—ñ.",
        "lunch": "–ü—Ä–∏–¥—É–º–∞–π –Ω–æ–≤–∏–π –æ–±—ñ–¥ –¥–ª—è –∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è –≤ –º—É–ª—å—Ç–∏–ø–µ—á—ñ.",
        "dinner": "–ü—Ä–∏–¥—É–º–∞–π –Ω–æ–≤—É –≤–µ—á–µ—Ä—é –¥–ª—è –∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è –≤ –º—É–ª—å—Ç–∏–ø–µ—á—ñ.",
        "workout": "–ü—Ä–∏–¥—É–º–∞–π —Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤ –∑ –ø—ñ–¥—Ö–æ–¥–∞–º–∏ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å."
    }
    try:
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ —Ñ—ñ—Ç–Ω–µ—Å-–¥—ñ—î—Ç–æ–ª–æ–≥. –ü–∏—à–∏ —á—ñ—Ç–∫–æ."},
                {"role": "user", "content": prompts[item]}
            ]
        )
        content = response.choices[0].message.content

        if item == "workout":
            weekday = datetime.datetime.now().strftime('%A').lower()
            # –ü—Ä–æ—Å—Ç–∞ –∑–∞–º—ñ–Ω–∞: 1 —Ä—è–¥ = –≤–ø—Ä–∞–≤–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ö–æ–¥—ñ–≤, –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
            WORKOUT_PLAN[weekday] = []
            for line in content.split("\n"):
                if line.strip():
                    parts = line.strip().split(" ‚Äì ")
                    if len(parts) == 2:
                        name = parts[0]
                        sets_reps = parts[1].lower().replace("x", "x").split("x")
                        if len(sets_reps) == 2:
                            WORKOUT_PLAN[weekday].append({"exercise": name, "sets": int(sets_reps[0]), "reps": int(sets_reps[1])})
        else:
            MEAL_PLAN[item] = content

        await callback.message.answer(f"–û–Ω–æ–≤–ª–µ–Ω–æ GPT: \n{content}")
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó GPT: {e}")
    await callback.answer()

# –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
async def send_reminders():
    now = datetime.datetime.now().strftime('%H:%M')
    weekday = datetime.datetime.now().strftime('%A').lower()
    for user_id in [123456789]:  # –î–æ–¥–∞–π —Å–≤—ñ–π Telegram ID
        if now == "07:00":
            await bot.send_message(user_id, "üìä –ß–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è! –ü–µ—Ä–µ–≤—ñ—Ä, —â–æ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:", reply_markup=main_menu)
        elif now == "08:30":
            await bot.send_message(user_id, f"üçº –°–Ω—ñ–¥–∞–Ω–æ–∫: {MEAL_PLAN['breakfast']}")
        elif now == "13:00":
            await bot.send_message(user_id, f"ü•ö –û–±—ñ–¥: {MEAL_PLAN['lunch']}")
        elif now == "19:00":
            await bot.send_message(user_id, f"üßÉ –í–µ—á–µ—Ä—è: {MEAL_PLAN['dinner']}")

scheduler.add_job(send_reminders, 'cron', minute='0', hour='7,8,13,19')

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
