import os
import asyncio
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set. Please add it to Railway ‚Üí Variables.")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ü–æ–≤–Ω–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å (–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è)
DAILY_MENU = """
üçΩÔ∏è <b>–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å</b> (–∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è):
- –°–Ω—ñ–¥–∞–Ω–æ–∫: –û–º–ª–µ—Ç –∑ 3 —è—î—Ü—å + –æ–≤–æ—á—ñ
- –ü–µ—Ä–µ–∫—É—Å: –ì—Ä–µ—Ü—å–∫–∏–π –π–æ–≥—É—Ä—Ç + —è–≥–æ–¥–∏
- –û–±—ñ–¥: –ö—É—Ä—è—á–µ —Ñ—ñ–ª–µ –∑ –±—É–ª–≥—É—Ä–æ–º + —Å–∞–ª–∞—Ç
- –ü–µ—Ä–µ–∫—É—Å: –ì–æ—Ä—ñ—Ö–∏/–ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –±–∞—Ç–æ–Ω—á–∏–∫
- –í–µ—á–µ—Ä—è: –†–∏–±–∞ –≤ –º—É–ª—å—Ç–∏–ø–µ—á—ñ + –æ–≤–æ—á—ñ
- –í–æ–¥–∞: 2.5‚Äì3 –ª üíß
"""

# –†–æ–∑–∫–ª–∞–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
WORKOUTS = {
    "monday": """
üî¥ <b>–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ ‚Äì –ì–†–£–î–ò + –¢–†–Ü–¶–ï–ü–° + –ü–ï–†–ï–î–ù–Ø –î–ï–õ–¨–¢–ê</b>
1. –ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞—á–∏ ‚Äî 4√ó8
2. –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ø—ñ–¥ –∫—É—Ç–æ–º ‚Äî 3√ó10
3. –ö—Ä–æ—Å–æ–≤–µ—Ä ‚Äî 3√ó12
4. –í—ñ–¥–∂–∏–º–∞–Ω–Ω—è –Ω–∞ –±—Ä—É—Å–∞—Ö ‚Äî 3√ó–º–∞–∫—Å
5. –ñ–∏–º –≤–Ω–∏–∑ –Ω–∞ —Ç—Ä—ñ—Ü–µ–ø—Å (–∫–∞–Ω–∞—Ç) ‚Äî 3√ó12
6. –§—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π –∂–∏–º ‚Äî 3√ó10
7. –§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ñ –ø—ñ–¥–π–æ–º–∏ –≥–∞–Ω—Ç–µ–ª–µ–π ‚Äî 3√ó15
""",
    "wednesday": """
üîµ <b>–°–µ—Ä–µ–¥–∞ ‚Äì –°–ü–ò–ù–ê + –ë–Ü–¶–ï–ü–° + –ó–ê–î–ù–Ø –î–ï–õ–¨–¢–ê</b>
1. –¢—è–≥–∞ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –±–ª–æ–∫—É ‚Äî 4√ó10
2. –¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞—Ö–∏–ª—ñ ‚Äî 3√ó10
3. –ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è / –Ω–∏–∂–Ω—è —Ç—è–≥–∞ ‚Äî 3√ó–º–∞–∫—Å
4. –ü—ñ–¥–π–æ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±—ñ—Ü–µ–ø—Å ‚Äî 3√ó12
5. –ú–æ–ª–æ—Ç–∫–∏ ‚Äî 3√ó12
6. –ó–≤–æ—Ä–æ—Ç–Ω—ñ –º–∞—Ö–∏ (–∑–∞–¥–Ω—è –¥–µ–ª—å—Ç–∞) ‚Äî 3√ó15
""",
    "friday": """
üü¢ <b>–ü‚Äô—è—Ç–Ω–∏—Ü—è ‚Äì –ù–û–ì–ò + –ü–†–ï–° + –ë–Ü–ß–ù–ê –î–ï–õ–¨–¢–ê</b>
1. –ñ–∏–º –Ω–æ–≥–∞–º–∏ / –ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è ‚Äî 4√ó10
2. –†—É–º—É–Ω—Å—å–∫–∞ —Ç—è–≥–∞ ‚Äî 3√ó12
3. –í–∏–ø–∞–¥–∏ ‚Äî 3√ó10 –Ω–∞ –Ω–æ–≥—É
4. –ü—Ä–µ—Å ‚Äî 3√ó15
5. –ë—ñ—á–Ω—ñ –º–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏ ‚Äî 3√ó15
6. –ë—ñ—á–Ω—ñ –º–∞—Ö–∏ —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ ‚Äî 3√ó15
"""
}


# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ?", callback_data="today")]
    ])
    await message.answer("üëã –í—ñ—Ç–∞—é —É SmartDailyBot! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=kb)


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–©–æ —Å—å–æ–≥–æ–¥–Ω—ñ?"
@dp.callback_query(lambda c: c.data == "today")
async def handle_today(callback: types.CallbackQuery):
    weekday = datetime.now().strftime("%A").lower()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèã –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="workout")],
        [InlineKeyboardButton(text="üçΩ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", callback_data="menu")]
    ])

    if weekday in WORKOUTS:
        await callback.message.answer(f"üîî –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!", reply_markup=kb)
    else:
        await callback.message.answer("üîï –°—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫, –∞–ª–µ –º–µ–Ω—é –∑–∞–≤–∂–¥–∏ –∞–∫—Ç—É–∞–ª—å–Ω–µ üçΩ", reply_markup=kb)

    await callback.answer()


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
@dp.callback_query(lambda c: c.data == "workout")
async def handle_workout(callback: types.CallbackQuery):
    weekday = datetime.now().strftime("%A").lower()
    workout = WORKOUTS.get(weekday, "–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è üí§")
    await callback.message.answer(workout)
    await callback.answer()


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é"
@dp.callback_query(lambda c: c.data == "menu")
async def handle_menu(callback: types.CallbackQuery):
    await callback.message.answer(DAILY_MENU)
    await callback.answer()


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
