import os
import asyncio
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# --- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å ---
WORKOUTS = {
    "monday": {
        "title": "üî¥ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ ‚Äì –ì–†–£–î–ò + –¢–†–Ü–¶–ï–ü–° + –ü–ï–†–ï–î–ù–Ø –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞—á–∏", "4√ó8"),
            ("–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ø—ñ–¥ –∫—É—Ç–æ–º", "3√ó10"),
            ("–ö—Ä–æ—Å–æ–≤–µ—Ä", "3√ó12"),
            ("–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è –Ω–∞ –±—Ä—É—Å–∞—Ö", "3√ó–º–∞–∫—Å"),
            ("–ñ–∏–º –≤–Ω–∏–∑ –Ω–∞ —Ç—Ä—ñ—Ü–µ–ø—Å (–∫–∞–Ω–∞—Ç)", "3√ó12"),
            ("–§—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π –∂–∏–º", "3√ó10"),
            ("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ñ –ø—ñ–¥–π–æ–º–∏ –≥–∞–Ω—Ç–µ–ª–µ–π", "3√ó15")
        ]
    },
    "wednesday": {
        "title": "üîµ –°–µ—Ä–µ–¥–∞ ‚Äì –°–ü–ò–ù–ê + –ë–Ü–¶–ï–ü–° + –ó–ê–î–ù–Ø –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –±–ª–æ–∫—É", "4√ó10"),
            ("–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞—Ö–∏–ª—ñ", "3√ó10"),
            ("–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è / –Ω–∏–∂–Ω—è —Ç—è–≥–∞", "3√ó–º–∞–∫—Å"),
            ("–ü—ñ–¥–π–æ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±—ñ—Ü–µ–ø—Å", "3√ó12"),
            ("–ú–æ–ª–æ—Ç–∫–∏", "3√ó12"),
            ("–ó–≤–æ—Ä–æ—Ç–Ω—ñ –º–∞—Ö–∏ –≤ –Ω–∞—Ö–∏–ª—ñ", "3√ó15")
        ]
    },
    "friday": {
        "title": "üü¢ –ü‚Äô—è—Ç–Ω–∏—Ü—è ‚Äì –ù–û–ì–ò + –ü–†–ï–° + –ë–Ü–ß–ù–ê –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–ñ–∏–º –Ω–æ–≥–∞–º–∏ / –ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è", "4√ó10"),
            ("–†—É–º—É–Ω—Å—å–∫–∞ —Ç—è–≥–∞", "3√ó12"),
            ("–í–∏–ø–∞–¥–∏", "3√ó10 –Ω–∞ –Ω–æ–≥—É"),
            ("–ü—Ä–µ—Å", "3√ó15"),
            ("–ë—ñ—á–Ω—ñ –º–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏ —Å—Ç–æ—è—á–∏", "3√ó15"),
            ("–ë—ñ—á–Ω—ñ –º–∞—Ö–∏ —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ", "3√ó15")
        ]
    }
}

# –ü–∞–º'—è—Ç—å —É –ø—Ä–æ—Ü–µ—Å—ñ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç—ñ)
user_progress = {}  # {user_id: {day_key: set(ex_idx)}}
user_cardio = {}    # {user_id: {day_key: [activities]}}

# --- –£—Ç–∏–ª—ñ—Ç–∏ –¥–∞—Ç ---
def get_today_key() -> str | None:
    # 0=Mon ... 6=Sun
    wd = datetime.datetime.now().weekday()
    mapping = {0: "monday", 2: "wednesday", 4: "friday"}
    return mapping.get(wd)

def weekday_name_ua(day_key: str) -> str:
    mapping = {
        "monday": "–ü–Ω",
        "wednesday": "–°—Ä",
        "friday": "–ü—Ç",
    }
    return mapping.get(day_key, day_key)

# --- –ö–Ω–æ–ø–∫–∏ ---
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="workout")],
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="add_activity")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])

def workout_day_keyboard(day_key: str | None):
    rows = []
    if day_key:
        rows.append([InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—ñ", callback_data=f"workout_details:{day_key}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def exercises_keyboard(day_key: str, user_id: int):
    buttons = []
    done = user_progress.get(user_id, {}).get(day_key, set())
    for i, (exercise, reps) in enumerate(WORKOUTS[day_key]["exercises"]):
        done_mark = "‚úÖ" if i in done else "‚¨úÔ∏è"
        buttons.append([InlineKeyboardButton(
            text=f"{done_mark} {exercise} ({reps})",
            callback_data=f"toggle:{day_key}:{i}"
        )])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())

@dp.callback_query(F.data == "workout")
async def workout_today(callback: types.CallbackQuery):
    day_key = get_today_key()
    if not day_key:
        await callback.message.answer("–°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É üåû", reply_markup=workout_day_keyboard(None))
    else:
        await callback.message.answer(
            f"<b>{WORKOUTS[day_key]['title']}</b>",
            reply_markup=workout_day_keyboard(day_key)
        )
    await callback.answer()

@dp.callback_query(F.data.startswith("workout_details"))
async def workout_details(callback: types.CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç: workout_details:monday
    parts = callback.data.split(":")
    day_key = parts[1] if len(parts) > 1 else get_today_key()
    if not day_key or day_key not in WORKOUTS:
        await callback.message.answer("–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î —Å–∏–ª–æ–≤–æ–≥–æ –¥–Ω—è. –ó—Ä–æ–±–∏ –∫–∞—Ä–¥—ñ–æ 30‚Äì40 —Ö–≤ üö∂‚Äç‚ôÇÔ∏è", reply_markup=main_menu())
        await callback.answer()
        return
    keyboard = exercises_keyboard(day_key, callback.from_user.id)
    await callback.message.answer("–í–ø—Ä–∞–≤–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("toggle:"))
async def toggle_exercise(callback: types.CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç: toggle:monday:2
    _, day_key, idx = callback.data.split(":")
    index = int(idx)
    user_id = callback.from_user.id

    user_progress.setdefault(user_id, {}).setdefault(day_key, set())
    if index in user_progress[user_id][day_key]:
        user_progress[user_id][day_key].remove(index)
    else:
        user_progress[user_id][day_key].add(index)

    keyboard = exercises_keyboard(day_key, user_id)
    # —Ä–µ–¥–∞–≥—É—î–º–æ —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ markup
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer("–û–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

@dp.callback_query(F.data == "add_activity")
async def add_custom_activity(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    day_key = get_today_key() or "rest"
    user_cardio.setdefault(user_id, {}).setdefault(day_key, []).append("–ö–∞—Ä–¥—ñ–æ / –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
    await callback.message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–æ–¥–∞–Ω–æ –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!", reply_markup=main_menu())
    await callback.answer()

@dp.callback_query(F.data == "stats")
async def show_statistics(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    report = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:</b>\n"
    for day_key in ["monday", "wednesday", "friday"]:
        title = WORKOUTS[day_key]["title"]
        completed_flag = "‚úÖ" if user_progress.get(user_id, {}).get(day_key) else "‚ùå"
        report += f"{weekday_name_ua(day_key)} ‚Äì {title} {completed_flag}\n"
        if user_cardio.get(user_id, {}).get(day_key):
            report += f"    üèÉ –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {len(user_cardio[user_id][day_key])} —Ä–∞–∑(—ñ–≤)\n"
    # –î–µ–Ω—å –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É ‚Äî —Ç–∞–∫–æ–∂ –ø–æ–∫–∞–∂–µ–º–æ, —è–∫—â–æ –±—É–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    rest_acts = user_cardio.get(user_id, {}).get("rest", [])
    if rest_acts:
        report += f"–ù–¥/–¥–Ω—ñ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É ‚Äì üèÉ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {len(rest_acts)} —Ä–∞–∑(—ñ–≤)\n"
    await callback.message.answer(report, reply_markup=main_menu())
    await callback.answer()

@dp.callback_query(F.data == "back")
async def go_back(callback: types.CallbackQuery):
    await callback.message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é", reply_markup=main_menu())
    await callback.answer()

async def main():
    # –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à ‚Äî –¥–æ–¥–∞–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ scheduler.add_job(...)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
