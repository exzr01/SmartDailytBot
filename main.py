import os
import asyncio
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from openai import OpenAI, OpenAIError

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set. Please add it to Railway ‚Üí Variables.")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY is not set. Please add it to Railway ‚Üí Variables.")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()
openai = OpenAI(api_key=OPENAI_API_KEY)

WORKOUT_PLAN = {
    "monday": "üî¥ –ü–æ–Ω–µ–¥i–ª–æ–∫ ‚Äì –ì–†–£–î–ò + –¢–†I–¶–ï–ü–° + –ü–ï–†–ï–î–ù–Ø –î–ï–õ–¨–¢–ê",
    "wednesday": "üîµ –°–µ—Ä–µ–¥–∞ ‚Äì –°–ü–ò–ù–ê + –ëI–¶–ï–ü–° + –ó–ê–î–ù–Ø –î–ï–õ–¨–¢–ê",
    "friday": "üî∑ –ü‚Äô—è—Ç–Ω–∏—Ü—è ‚Äì –ù–û–ì–ò + –ü–†–ï–° + –ëI–ß–ù–ê –î–ï–õ–¨–¢–ê"
}

MEAL_PLAN = {
    "breakfast": {"text": "üçº –û–º–ª–µ—Ç –∑ –æ–≤–æ—á–∞–º–∏ –≤ –º—É–ª—å—Ç–∏–ø–µ—á—ñ", "calories": 300},
    "lunch": {"text": "ü•ö –ö—É—Ä—è—á–µ —Ñ—ñ–ª–µ –∑ –±—Ä–æ–∫–æ–ª—ñ", "calories": 500},
    "dinner": {"text": "üßÉ –†–∏–±–∞ –∑ –æ–≤–æ—á–∞–º–∏ –Ω–∞ –ø–∞—Ä—ñ", "calories": 400}
}

main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùì –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ?", callback_data="today")],
    [InlineKeyboardButton(text="üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="workout")],
    [InlineKeyboardButton(text="üçΩÔ∏è –ú–µ–Ω—é", callback_data="menu")]
])

def menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ú® –û–Ω–æ–≤–∏—Ç–∏ —Å–Ω—ñ–¥–∞–Ω–æ–∫", callback_data="gpt_breakfast")],
        [InlineKeyboardButton(text="‚ú® –û–Ω–æ–≤–∏—Ç–∏ –æ–±—ñ–¥", callback_data="gpt_lunch")],
        [InlineKeyboardButton(text="‚ú® –û–Ω–æ–≤–∏—Ç–∏ –≤–µ—á–µ—Ä—é", callback_data="gpt_dinner")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def workout_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ú® –û–Ω–æ–≤–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="gpt_workout")],
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Å–≤–æ—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="custom_workout")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø SmartDailyBot. –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu)

@dp.callback_query(F.data == "back")
async def go_back(callback: types.CallbackQuery):
    await callback.message.edit_text("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_menu)
    await callback.answer()

@dp.callback_query(F.data == "today")
async def today_plan(callback: types.CallbackQuery):
    weekday = datetime.datetime.now().strftime('%A').lower()
    workout = WORKOUT_PLAN.get(weekday, "–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ª–µ–≥–∫–µ –∫–∞—Ä–¥—ñ–æ üö∂‚Äç‚ôÇÔ∏è")
    meals = "\n".join([
        f"{MEAL_PLAN[meal]['text']} ‚Äî {MEAL_PLAN[meal]['calories']} –∫–∫–∞–ª" for meal in ["breakfast", "lunch", "dinner"]
    ])
    await callback.message.answer(f"<b>–¢–≤—ñ–π –¥–µ–Ω—å:</b>\n\n<b>–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</b>\n{workout}\n\n<b>–ú–µ–Ω—é:</b>\n{meals}")
    await callback.answer()

@dp.callback_query(F.data == "workout")
async def workout_details(callback: types.CallbackQuery):
    weekday = datetime.datetime.now().strftime('%A').lower()
    workout = WORKOUT_PLAN.get(weekday, "–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π –∫–∞—Ä–¥—ñ–æ üö¥")
    await callback.message.answer(f"<b>–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</b>\n{workout}", reply_markup=workout_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "menu")
async def menu_details(callback: types.CallbackQuery):
    meals = "\n".join([
        f"{MEAL_PLAN[meal]['text']} ‚Äî {MEAL_PLAN[meal]['calories']} –∫–∫–∞–ª" for meal in ["breakfast", "lunch", "dinner"]
    ])
    await callback.message.answer(f"<b>–ú–µ–Ω—é –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:</b>\n{meals}", reply_markup=menu_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "custom_workout")
async def custom_workout(callback: types.CallbackQuery):
    await callback.message.answer("–ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–º, —ñ —è –π–æ–≥–æ –∑–±–µ—Ä–µ–∂—É (–Ω–µ –∑–±–µ—Ä–µ–∂–µ—Ç—å—Å—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É)")
    await callback.answer()

@dp.callback_query(F.data.in_(["gpt_breakfast", "gpt_lunch", "gpt_dinner", "gpt_workout"]))
async def gpt_update(callback: types.CallbackQuery):
    target = callback.data.split("_")[1]
    prompts = {
        "breakfast": "–°—Ç–≤–æ—Ä–∏ –∑–¥–æ—Ä–æ–≤–∏–π —Å–Ω—ñ–¥–∞–Ω–æ–∫ –¥–æ 300 –∫–∫–∞–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ 1 —Ä–µ—á–µ–Ω–Ω—è",
        "lunch": "–°—Ç–≤–æ—Ä–∏ –∑–¥–æ—Ä–æ–≤–∏–π –æ–±—ñ–¥ –¥–æ 500 –∫–∫–∞–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ 1 —Ä–µ—á–µ–Ω–Ω—è",
        "dinner": "–°—Ç–≤–æ—Ä–∏ –ª–µ–≥–∫—É –≤–µ—á–µ—Ä—é –¥–æ 400 –∫–∫–∞–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ 1 —Ä–µ—á–µ–Ω–Ω—è",
        "workout": "–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å"
    }
    try:
        chat = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ —Ñ—ñ—Ç–Ω–µ—Å-–∞—Å–∏—Å—Ç–µ–Ω—Ç —ñ –¥—ñ—î—Ç–æ–ª–æ–≥."},
                {"role": "user", "content": prompts[target]}
            ]
        )
        result = chat.choices[0].message.content
        if target in MEAL_PLAN:
            MEAL_PLAN[target]['text'] = result
        elif target == "workout":
            weekday = datetime.datetime.now().strftime('%A').lower()
            WORKOUT_PLAN[weekday] = result
        await callback.message.answer(f"–û–Ω–æ–≤–ª–µ–Ω–æ GPT:\n{result}")
    except OpenAIError as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ GPT: {str(e)}")
    await callback.answer()

# –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
async def send_reminders():
    now = datetime.datetime.now().strftime('%H:%M')
    weekday = datetime.datetime.now().strftime('%A').lower()
    user_ids = [7793370563]  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram user_id
    for user_id in user_ids:
        if now == "07:00":
            await bot.send_message(user_id, "üìä –ß–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è! –ü–µ—Ä–µ–≤—ñ—Ä, —â–æ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:", reply_markup=main_menu)
        elif now == "08:30":
            await bot.send_message(user_id, f"üçº –°–Ω—ñ–¥–∞–Ω–æ–∫: {MEAL_PLAN['breakfast']['text']}")
        elif now == "13:00":
            await bot.send_message(user_id, f"ü•ö –û–±—ñ–¥: {MEAL_PLAN['lunch']['text']}")
        elif now == "19:00":
            await bot.send_message(user_id, f"üßÉ –í–µ—á–µ—Ä—è: {MEAL_PLAN['dinner']['text']}")

scheduler.add_job(send_reminders, 'cron', minute='0', hour='7,8,13,19')

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
