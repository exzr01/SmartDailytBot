import os
import asyncio
import datetime as dt
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# --- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å (—è–∫ –±—É–ª–æ) ---
WORKOUTS = {
    "monday": {
        "title": "üî¥ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ ‚Äì –ì–†–£–î–ò + –¢–†–Ü–¶–ï–ü–° + –ü–ï–†–ï–î–ù–Ø –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞—á–∏", "4√ó8"),
            ("–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ø—ñ–¥ –∫—É—Ç–æ–º", "3√ó10"),
            ("–ö—Ä–æ—Å–æ–≤–µ—Ä", "3√ó12"),
            ("–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è –Ω–∞ –±—Ä—É—Å–∞—Ö", "3√ó–º–∞–∫—Å"),
            ("–ñ–∏–º –≤–Ω–∏–∑ –Ω–∞ —Ç—Ä—ñ—Ü–µ–ø—Å (–∫–∞–Ω–∞—Ç)", "3√ó12"),
            ("–§—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π –∂–∏–º", "3√ó10"),
            ("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ñ –ø—ñ–¥–π–æ–º–∏ –≥–∞–Ω—Ç–µ–ª–µ–π", "3√ó15")
        ]
    },
    "wednesday": {
        "title": "üîµ –°–µ—Ä–µ–¥–∞ ‚Äì –°–ü–ò–ù–ê + –ë–Ü–¶–ï–ü–° + –ó–ê–î–ù–Ø –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –±–ª–æ–∫—É", "4√ó10"),
            ("–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞—Ö–∏–ª—ñ", "3√ó10"),
            ("–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è / –Ω–∏–∂–Ω—è —Ç—è–≥–∞", "3√ó–º–∞–∫—Å"),
            ("–ü—ñ–¥–π–æ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±—ñ—Ü–µ–ø—Å", "3√ó12"),
            ("–ú–æ–ª–æ—Ç–∫–∏", "3√ó12"),
            ("–ó–≤–æ—Ä–æ—Ç–Ω—ñ –º–∞—Ö–∏ –≤ –Ω–∞—Ö–∏–ª—ñ", "3√ó15")
        ]
    },
    "friday": {
        "title": "üü¢ –ü‚Äô—è—Ç–Ω–∏—Ü—è ‚Äì –ù–û–ì–ò + –ü–†–ï–° + –ë–Ü–ß–ù–ê –î–ï–õ–¨–¢–ê",
        "exercises": [
            ("–ñ–∏–º –Ω–æ–≥–∞–º–∏ / –ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è", "4√ó10"),
            ("–†—É–º—É–Ω—Å—å–∫–∞ —Ç—è–≥–∞", "3√ó12"),
            ("–í–∏–ø–∞–¥–∏", "3√ó10 –Ω–∞ –Ω–æ–≥—É"),
            ("–ü—Ä–µ—Å", "3√ó15"),
            ("–ë—ñ—á–Ω—ñ –º–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏ —Å—Ç–æ—è—á–∏", "3√ó15"),
            ("–ë—ñ—á–Ω—ñ –º–∞—Ö–∏ —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ", "3√ó15")
        ]
    }
}

# ======== –ù–û–í–ï: –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –ø–æ –î–ê–¢–Ü =========
# user_progress = { user_id: { "YYYY-MM-DD": set(exercise_indexes) } }
# user_cardio   = { user_id: { "YYYY-MM-DD": [activities...] } }
user_progress: dict[int, dict[str, set[int]]] = {}
user_cardio: dict[int, dict[str, list[str]]] = {}

# --- –î–∞—Ç–∏/–¥–Ω—ñ ---
def today_date_str() -> str:
    return dt.date.today().isoformat()  # 'YYYY-MM-DD'

def weekday_key_by_date(d: dt.date) -> str | None:
    mapping = {0: "monday", 2: "wednesday", 4: "friday"}
    return mapping.get(d.weekday())

def weekday_short_ua(d: dt.date) -> str:
    return ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–ù–¥"][d.weekday()]

# --- –ö–Ω–æ–ø–∫–∏ ---
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="workout_today")],
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="add_activity")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])

def exercises_keyboard(date_str: str, day_key: str, user_id: int):
    buttons = []
    done = user_progress.get(user_id, {}).get(date_str, set())
    for i, (exercise, reps) in enumerate(WORKOUTS[day_key]["exercises"]):
        mark = "‚úÖ" if i in done else "‚¨úÔ∏è"
        buttons.append([InlineKeyboardButton(
            text=f"{mark} {exercise} ({reps})",
            callback_data=f"toggle:{date_str}:{day_key}:{i}"
        )])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –†–µ–Ω–¥–µ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å (–æ–¥—Ä–∞–∑—É –∑ —á–µ–∫–±–æ–∫—Å–∞–º–∏) ---
def render_workout_for_today(user_id: int) -> tuple[str, InlineKeyboardMarkup]:
    date_str = today_date_str()
    day_key = weekday_key_by_date(dt.date.today())
    if not day_key:
        # –î–µ–Ω—å –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É, –ø–æ–∫–∞–∑—É—î–º–æ –º–µ—Å–µ–¥–∂ + –Ω–∞–∑–∞–¥
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ])
        return ("–°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É üåû –ó—Ä–æ–±–∏ –∫–∞—Ä–¥—ñ–æ 30‚Äì40 —Ö–≤ üö∂‚Äç‚ôÇÔ∏è", kb)
    title = WORKOUTS[day_key]["title"]
    text = f"<b>{title}</b>\n–û–±–∏—Ä–∞–π –≤–ø—Ä–∞–≤–∏ —Ç–∞ –≤—ñ–¥–º—ñ—á–∞–π –≤–∏–∫–æ–Ω–∞–Ω–µ:"
    kb = exercises_keyboard(date_str, day_key, user_id)
    return (text, kb)

# --- Handlers ---
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())

# –ù–û–í–ï: –Ω–∞—Ç–∏—Å–∫–∞—î—à ¬´–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è¬ª ‚Äî –æ–¥—Ä–∞–∑—É –ø–ª–∞–Ω –∑ —á–µ–∫–±–æ–∫—Å–∞–º–∏ (–±–µ–∑ ¬´–¥–µ—Ç–∞–ª–µ–π¬ª)
@dp.callback_query(F.data == "workout_today")
async def workout_today(callback: types.CallbackQuery):
    text, kb = render_workout_for_today(callback.from_user.id)
    await callback.message.answer(text, reply_markup=kb)
    await callback.answer()

# –¢–æ–≥–ª –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ–π –î–ê–¢–Ü (—â–æ–¥–Ω—è —á–∏—Å—Ç–∏–π –∞—Ä–∫—É—à)
@dp.callback_query(F.data.startswith("toggle:"))
async def toggle_exercise(callback: types.CallbackQuery):
    # toggle:YYYY-MM-DD:day_key:index
    _, date_str, day_key, idx = callback.data.split(":")
    index = int(idx)
    uid = callback.from_user.id

    user_progress.setdefault(uid, {}).setdefault(date_str, set())
    if index in user_progress[uid][date_str]:
        user_progress[uid][date_str].remove(index)
    else:
        user_progress[uid][date_str].add(index)

    kb = exercises_keyboard(date_str, day_key, uid)
    await callback.message.edit_reply_markup(reply_markup=kb)
    await callback.answer("–û–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

@dp.callback_query(F.data == "add_activity")
async def add_custom_activity(callback: types.CallbackQuery):
    uid = callback.from_user.id
    date_str = today_date_str()
    user_cardio.setdefault(uid, {}).setdefault(date_str, []).append("–ö–∞—Ä–¥—ñ–æ / –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
    await callback.message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–æ–¥–∞–Ω–æ –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!", reply_markup=main_menu())
    await callback.answer()

# –†–û–ó–®–ò–†–ï–ù–ê —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ—Å—Ç–∞–Ω–Ω—ñ 14 –¥–Ω—ñ–≤ + –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
@dp.callback_query(F.data == "stats")
async def show_statistics(callback: types.CallbackQuery):
    uid = callback.from_user.id
    today = dt.date.today()
    start = today - dt.timedelta(days=13)
    lines = ["üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Å—Ç. 14 –¥–Ω—ñ–≤)</b>"]

    sessions_done = 0
    sessions_total = 0
    cardio_total = 0

    for i in range(14):
        day = start + dt.timedelta(days=i)
        dstr = day.isoformat()
        dshort = weekday_short_ua(day)

        day_key = weekday_key_by_date(day)
        cardio_cnt = len(user_cardio.get(uid, {}).get(dstr, []))
        cardio_total += cardio_cnt

        if day_key:
            total_ex = len(WORKOUTS[day_key]["exercises"])
            done_ex = len(user_progress.get(uid, {}).get(dstr, set()))
            status = "‚úÖ" if done_ex > 0 else "‚ùå"
            sessions_total += 1
            if done_ex == total_ex:
                sessions_done += 1
            lines.append(f"{dshort} {dstr} ‚Äî {WORKOUTS[day_key]['title']} | {done_ex}/{total_ex} –≤–ø—Ä–∞–≤ {status}"
                         + (f" | üèÉ {cardio_cnt}" if cardio_cnt else ""))
        else:
            # –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫
            status = "‚Äî"
            lines.append(f"{dshort} {dstr} ‚Äî –î–µ–Ω—å –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É {status}"
                         + (f" | üèÉ {cardio_cnt}" if cardio_cnt else ""))

    # –ü—ñ–¥—Å—É–º–æ–∫
    rate = f"{(sessions_done / sessions_total * 100):.0f}%" if sessions_total else "0%"
    lines.append("\n<b>–ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ 14 –¥–Ω—ñ–≤</b>")
    lines.append(f"‚Ä¢ –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {sessions_done}/{sessions_total} ({rate})")
    lines.append(f"‚Ä¢ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–∫–∞—Ä–¥—ñ–æ —Ç–æ—â–æ): {cardio_total}")

    await callback.message.answer("\n".join(lines), reply_markup=main_menu())
    await callback.answer()

@dp.callback_query(F.data == "back")
async def go_back(callback: types.CallbackQuery):
    await callback.message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é", reply_markup=main_menu())
    await callback.answer()

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
